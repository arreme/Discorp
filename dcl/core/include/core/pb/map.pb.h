// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "location.pb.h"
#include "interaction.pb.h"
#include "player.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto;
class PBBattleInfo;
class PBBattleInfoDefaultTypeInternal;
extern PBBattleInfoDefaultTypeInternal _PBBattleInfo_default_instance_;
class PBGameState;
class PBGameStateDefaultTypeInternal;
extern PBGameStateDefaultTypeInternal _PBGameState_default_instance_;
class PBLocation;
class PBLocationDefaultTypeInternal;
extern PBLocationDefaultTypeInternal _PBLocation_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBBattleInfo* Arena::CreateMaybeMessage<::PBBattleInfo>(Arena*);
template<> ::PBGameState* Arena::CreateMaybeMessage<::PBGameState>(Arena*);
template<> ::PBLocation* Arena::CreateMaybeMessage<::PBLocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PBLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBLocation) */ {
 public:
  inline PBLocation() : PBLocation(nullptr) {};
  virtual ~PBLocation();

  PBLocation(const PBLocation& from);
  PBLocation(PBLocation&& from) noexcept
    : PBLocation() {
    *this = ::std::move(from);
  }

  inline PBLocation& operator=(const PBLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBLocation& operator=(PBLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBLocation* internal_default_instance() {
    return reinterpret_cast<const PBLocation*>(
               &_PBLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBLocation& a, PBLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(PBLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBLocation* New() const final {
    return CreateMaybeMessage<PBLocation>(nullptr);
  }

  PBLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBLocation& from);
  void MergeFrom(const PBLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBLocation";
  }
  protected:
  explicit PBLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionsFieldNumber = 5,
    kImageFieldNumber = 3,
    kNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kDatabaseIdFieldNumber = 2,
  };
  // repeated .PBInteraction interactions = 5;
  int interactions_size() const;
  private:
  int _internal_interactions_size() const;
  public:
  void clear_interactions();
  ::PBInteraction* mutable_interactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBInteraction >*
      mutable_interactions();
  private:
  const ::PBInteraction& _internal_interactions(int index) const;
  ::PBInteraction* _internal_add_interactions();
  public:
  const ::PBInteraction& interactions(int index) const;
  ::PBInteraction* add_interactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBInteraction >&
      interactions() const;

  // string image = 3;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .PBLocationID id = 1;
  void clear_id();
  ::PBLocationID id() const;
  void set_id(::PBLocationID value);
  private:
  ::PBLocationID _internal_id() const;
  void _internal_set_id(::PBLocationID value);
  public:

  // int32 database_id = 2;
  void clear_database_id();
  ::PROTOBUF_NAMESPACE_ID::int32 database_id() const;
  void set_database_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_database_id() const;
  void _internal_set_database_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBInteraction > interactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int id_;
  ::PROTOBUF_NAMESPACE_ID::int32 database_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PBBattleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBBattleInfo) */ {
 public:
  inline PBBattleInfo() : PBBattleInfo(nullptr) {};
  virtual ~PBBattleInfo();

  PBBattleInfo(const PBBattleInfo& from);
  PBBattleInfo(PBBattleInfo&& from) noexcept
    : PBBattleInfo() {
    *this = ::std::move(from);
  }

  inline PBBattleInfo& operator=(const PBBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBBattleInfo& operator=(PBBattleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBBattleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBBattleInfo* internal_default_instance() {
    return reinterpret_cast<const PBBattleInfo*>(
               &_PBBattleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBBattleInfo& a, PBBattleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PBBattleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBBattleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBBattleInfo* New() const final {
    return CreateMaybeMessage<PBBattleInfo>(nullptr);
  }

  PBBattleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBBattleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBBattleInfo& from);
  void MergeFrom(const PBBattleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBBattleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBBattleInfo";
  }
  protected:
  explicit PBBattleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 2,
    kEnemeyInfoFieldNumber = 3,
    kIsNpcFieldNumber = 1,
  };
  // .PBPlayer player_info = 2;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::PBPlayer& player_info() const;
  ::PBPlayer* release_player_info();
  ::PBPlayer* mutable_player_info();
  void set_allocated_player_info(::PBPlayer* player_info);
  private:
  const ::PBPlayer& _internal_player_info() const;
  ::PBPlayer* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::PBPlayer* player_info);
  ::PBPlayer* unsafe_arena_release_player_info();

  // .PBPlayer enemey_info = 3;
  bool has_enemey_info() const;
  private:
  bool _internal_has_enemey_info() const;
  public:
  void clear_enemey_info();
  const ::PBPlayer& enemey_info() const;
  ::PBPlayer* release_enemey_info();
  ::PBPlayer* mutable_enemey_info();
  void set_allocated_enemey_info(::PBPlayer* enemey_info);
  private:
  const ::PBPlayer& _internal_enemey_info() const;
  ::PBPlayer* _internal_mutable_enemey_info();
  public:
  void unsafe_arena_set_allocated_enemey_info(
      ::PBPlayer* enemey_info);
  ::PBPlayer* unsafe_arena_release_enemey_info();

  // bool is_npc = 1;
  void clear_is_npc();
  bool is_npc() const;
  void set_is_npc(bool value);
  private:
  bool _internal_is_npc() const;
  void _internal_set_is_npc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PBBattleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBPlayer* player_info_;
  ::PBPlayer* enemey_info_;
  bool is_npc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PBGameState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBGameState) */ {
 public:
  inline PBGameState() : PBGameState(nullptr) {};
  virtual ~PBGameState();

  PBGameState(const PBGameState& from);
  PBGameState(PBGameState&& from) noexcept
    : PBGameState() {
    *this = ::std::move(from);
  }

  inline PBGameState& operator=(const PBGameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBGameState& operator=(PBGameState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBGameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBGameState* internal_default_instance() {
    return reinterpret_cast<const PBGameState*>(
               &_PBGameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBGameState& a, PBGameState& b) {
    a.Swap(&b);
  }
  inline void Swap(PBGameState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBGameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBGameState* New() const final {
    return CreateMaybeMessage<PBGameState>(nullptr);
  }

  PBGameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBGameState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBGameState& from);
  void MergeFrom(const PBGameState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBGameState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBGameState";
  }
  protected:
  explicit PBGameState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 1,
    kBattleInfoFieldNumber = 2,
  };
  // repeated .PBLocation locations = 1;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  ::PBLocation* mutable_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBLocation >*
      mutable_locations();
  private:
  const ::PBLocation& _internal_locations(int index) const;
  ::PBLocation* _internal_add_locations();
  public:
  const ::PBLocation& locations(int index) const;
  ::PBLocation* add_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBLocation >&
      locations() const;

  // .PBBattleInfo battle_info = 2;
  bool has_battle_info() const;
  private:
  bool _internal_has_battle_info() const;
  public:
  void clear_battle_info();
  const ::PBBattleInfo& battle_info() const;
  ::PBBattleInfo* release_battle_info();
  ::PBBattleInfo* mutable_battle_info();
  void set_allocated_battle_info(::PBBattleInfo* battle_info);
  private:
  const ::PBBattleInfo& _internal_battle_info() const;
  ::PBBattleInfo* _internal_mutable_battle_info();
  public:
  void unsafe_arena_set_allocated_battle_info(
      ::PBBattleInfo* battle_info);
  ::PBBattleInfo* unsafe_arena_release_battle_info();

  // @@protoc_insertion_point(class_scope:PBGameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBLocation > locations_;
  ::PBBattleInfo* battle_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBLocation

// .PBLocationID id = 1;
inline void PBLocation::clear_id() {
  id_ = 0;
}
inline ::PBLocationID PBLocation::_internal_id() const {
  return static_cast< ::PBLocationID >(id_);
}
inline ::PBLocationID PBLocation::id() const {
  // @@protoc_insertion_point(field_get:PBLocation.id)
  return _internal_id();
}
inline void PBLocation::_internal_set_id(::PBLocationID value) {
  
  id_ = value;
}
inline void PBLocation::set_id(::PBLocationID value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PBLocation.id)
}

// int32 database_id = 2;
inline void PBLocation::clear_database_id() {
  database_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBLocation::_internal_database_id() const {
  return database_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBLocation::database_id() const {
  // @@protoc_insertion_point(field_get:PBLocation.database_id)
  return _internal_database_id();
}
inline void PBLocation::_internal_set_database_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  database_id_ = value;
}
inline void PBLocation::set_database_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_database_id(value);
  // @@protoc_insertion_point(field_set:PBLocation.database_id)
}

// string image = 3;
inline void PBLocation::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBLocation::image() const {
  // @@protoc_insertion_point(field_get:PBLocation.image)
  return _internal_image();
}
inline void PBLocation::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:PBLocation.image)
}
inline std::string* PBLocation::mutable_image() {
  // @@protoc_insertion_point(field_mutable:PBLocation.image)
  return _internal_mutable_image();
}
inline const std::string& PBLocation::_internal_image() const {
  return image_.Get();
}
inline void PBLocation::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBLocation::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBLocation.image)
}
inline void PBLocation::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBLocation.image)
}
inline void PBLocation::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBLocation.image)
}
inline std::string* PBLocation::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBLocation::release_image() {
  // @@protoc_insertion_point(field_release:PBLocation.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBLocation::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBLocation.image)
}
inline std::string* PBLocation::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBLocation.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBLocation::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBLocation.image)
}

// string name = 4;
inline void PBLocation::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PBLocation::name() const {
  // @@protoc_insertion_point(field_get:PBLocation.name)
  return _internal_name();
}
inline void PBLocation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PBLocation.name)
}
inline std::string* PBLocation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PBLocation.name)
  return _internal_mutable_name();
}
inline const std::string& PBLocation::_internal_name() const {
  return name_.Get();
}
inline void PBLocation::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PBLocation::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PBLocation.name)
}
inline void PBLocation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PBLocation.name)
}
inline void PBLocation::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PBLocation.name)
}
inline std::string* PBLocation::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PBLocation::release_name() {
  // @@protoc_insertion_point(field_release:PBLocation.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PBLocation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PBLocation.name)
}
inline std::string* PBLocation::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PBLocation.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PBLocation::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBLocation.name)
}

// repeated .PBInteraction interactions = 5;
inline int PBLocation::_internal_interactions_size() const {
  return interactions_.size();
}
inline int PBLocation::interactions_size() const {
  return _internal_interactions_size();
}
inline ::PBInteraction* PBLocation::mutable_interactions(int index) {
  // @@protoc_insertion_point(field_mutable:PBLocation.interactions)
  return interactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBInteraction >*
PBLocation::mutable_interactions() {
  // @@protoc_insertion_point(field_mutable_list:PBLocation.interactions)
  return &interactions_;
}
inline const ::PBInteraction& PBLocation::_internal_interactions(int index) const {
  return interactions_.Get(index);
}
inline const ::PBInteraction& PBLocation::interactions(int index) const {
  // @@protoc_insertion_point(field_get:PBLocation.interactions)
  return _internal_interactions(index);
}
inline ::PBInteraction* PBLocation::_internal_add_interactions() {
  return interactions_.Add();
}
inline ::PBInteraction* PBLocation::add_interactions() {
  // @@protoc_insertion_point(field_add:PBLocation.interactions)
  return _internal_add_interactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBInteraction >&
PBLocation::interactions() const {
  // @@protoc_insertion_point(field_list:PBLocation.interactions)
  return interactions_;
}

// -------------------------------------------------------------------

// PBBattleInfo

// bool is_npc = 1;
inline void PBBattleInfo::clear_is_npc() {
  is_npc_ = false;
}
inline bool PBBattleInfo::_internal_is_npc() const {
  return is_npc_;
}
inline bool PBBattleInfo::is_npc() const {
  // @@protoc_insertion_point(field_get:PBBattleInfo.is_npc)
  return _internal_is_npc();
}
inline void PBBattleInfo::_internal_set_is_npc(bool value) {
  
  is_npc_ = value;
}
inline void PBBattleInfo::set_is_npc(bool value) {
  _internal_set_is_npc(value);
  // @@protoc_insertion_point(field_set:PBBattleInfo.is_npc)
}

// .PBPlayer player_info = 2;
inline bool PBBattleInfo::_internal_has_player_info() const {
  return this != internal_default_instance() && player_info_ != nullptr;
}
inline bool PBBattleInfo::has_player_info() const {
  return _internal_has_player_info();
}
inline const ::PBPlayer& PBBattleInfo::_internal_player_info() const {
  const ::PBPlayer* p = player_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBPlayer*>(
      &::_PBPlayer_default_instance_);
}
inline const ::PBPlayer& PBBattleInfo::player_info() const {
  // @@protoc_insertion_point(field_get:PBBattleInfo.player_info)
  return _internal_player_info();
}
inline void PBBattleInfo::unsafe_arena_set_allocated_player_info(
    ::PBPlayer* player_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBBattleInfo.player_info)
}
inline ::PBPlayer* PBBattleInfo::release_player_info() {
  auto temp = unsafe_arena_release_player_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBPlayer* PBBattleInfo::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:PBBattleInfo.player_info)
  
  ::PBPlayer* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::PBPlayer* PBBattleInfo::_internal_mutable_player_info() {
  
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBPlayer>(GetArena());
    player_info_ = p;
  }
  return player_info_;
}
inline ::PBPlayer* PBBattleInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:PBBattleInfo.player_info)
  return _internal_mutable_player_info();
}
inline void PBBattleInfo::set_allocated_player_info(::PBPlayer* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info)->GetArena();
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:PBBattleInfo.player_info)
}

// .PBPlayer enemey_info = 3;
inline bool PBBattleInfo::_internal_has_enemey_info() const {
  return this != internal_default_instance() && enemey_info_ != nullptr;
}
inline bool PBBattleInfo::has_enemey_info() const {
  return _internal_has_enemey_info();
}
inline const ::PBPlayer& PBBattleInfo::_internal_enemey_info() const {
  const ::PBPlayer* p = enemey_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBPlayer*>(
      &::_PBPlayer_default_instance_);
}
inline const ::PBPlayer& PBBattleInfo::enemey_info() const {
  // @@protoc_insertion_point(field_get:PBBattleInfo.enemey_info)
  return _internal_enemey_info();
}
inline void PBBattleInfo::unsafe_arena_set_allocated_enemey_info(
    ::PBPlayer* enemey_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enemey_info_);
  }
  enemey_info_ = enemey_info;
  if (enemey_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBBattleInfo.enemey_info)
}
inline ::PBPlayer* PBBattleInfo::release_enemey_info() {
  auto temp = unsafe_arena_release_enemey_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBPlayer* PBBattleInfo::unsafe_arena_release_enemey_info() {
  // @@protoc_insertion_point(field_release:PBBattleInfo.enemey_info)
  
  ::PBPlayer* temp = enemey_info_;
  enemey_info_ = nullptr;
  return temp;
}
inline ::PBPlayer* PBBattleInfo::_internal_mutable_enemey_info() {
  
  if (enemey_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBPlayer>(GetArena());
    enemey_info_ = p;
  }
  return enemey_info_;
}
inline ::PBPlayer* PBBattleInfo::mutable_enemey_info() {
  // @@protoc_insertion_point(field_mutable:PBBattleInfo.enemey_info)
  return _internal_mutable_enemey_info();
}
inline void PBBattleInfo::set_allocated_enemey_info(::PBPlayer* enemey_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enemey_info_);
  }
  if (enemey_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enemey_info)->GetArena();
    if (message_arena != submessage_arena) {
      enemey_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enemey_info, submessage_arena);
    }
    
  } else {
    
  }
  enemey_info_ = enemey_info;
  // @@protoc_insertion_point(field_set_allocated:PBBattleInfo.enemey_info)
}

// -------------------------------------------------------------------

// PBGameState

// repeated .PBLocation locations = 1;
inline int PBGameState::_internal_locations_size() const {
  return locations_.size();
}
inline int PBGameState::locations_size() const {
  return _internal_locations_size();
}
inline void PBGameState::clear_locations() {
  locations_.Clear();
}
inline ::PBLocation* PBGameState::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:PBGameState.locations)
  return locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBLocation >*
PBGameState::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:PBGameState.locations)
  return &locations_;
}
inline const ::PBLocation& PBGameState::_internal_locations(int index) const {
  return locations_.Get(index);
}
inline const ::PBLocation& PBGameState::locations(int index) const {
  // @@protoc_insertion_point(field_get:PBGameState.locations)
  return _internal_locations(index);
}
inline ::PBLocation* PBGameState::_internal_add_locations() {
  return locations_.Add();
}
inline ::PBLocation* PBGameState::add_locations() {
  // @@protoc_insertion_point(field_add:PBGameState.locations)
  return _internal_add_locations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBLocation >&
PBGameState::locations() const {
  // @@protoc_insertion_point(field_list:PBGameState.locations)
  return locations_;
}

// .PBBattleInfo battle_info = 2;
inline bool PBGameState::_internal_has_battle_info() const {
  return this != internal_default_instance() && battle_info_ != nullptr;
}
inline bool PBGameState::has_battle_info() const {
  return _internal_has_battle_info();
}
inline void PBGameState::clear_battle_info() {
  if (GetArena() == nullptr && battle_info_ != nullptr) {
    delete battle_info_;
  }
  battle_info_ = nullptr;
}
inline const ::PBBattleInfo& PBGameState::_internal_battle_info() const {
  const ::PBBattleInfo* p = battle_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBBattleInfo*>(
      &::_PBBattleInfo_default_instance_);
}
inline const ::PBBattleInfo& PBGameState::battle_info() const {
  // @@protoc_insertion_point(field_get:PBGameState.battle_info)
  return _internal_battle_info();
}
inline void PBGameState::unsafe_arena_set_allocated_battle_info(
    ::PBBattleInfo* battle_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battle_info_);
  }
  battle_info_ = battle_info;
  if (battle_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBGameState.battle_info)
}
inline ::PBBattleInfo* PBGameState::release_battle_info() {
  auto temp = unsafe_arena_release_battle_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBBattleInfo* PBGameState::unsafe_arena_release_battle_info() {
  // @@protoc_insertion_point(field_release:PBGameState.battle_info)
  
  ::PBBattleInfo* temp = battle_info_;
  battle_info_ = nullptr;
  return temp;
}
inline ::PBBattleInfo* PBGameState::_internal_mutable_battle_info() {
  
  if (battle_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBBattleInfo>(GetArena());
    battle_info_ = p;
  }
  return battle_info_;
}
inline ::PBBattleInfo* PBGameState::mutable_battle_info() {
  // @@protoc_insertion_point(field_mutable:PBGameState.battle_info)
  return _internal_mutable_battle_info();
}
inline void PBGameState::set_allocated_battle_info(::PBBattleInfo* battle_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete battle_info_;
  }
  if (battle_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(battle_info);
    if (message_arena != submessage_arena) {
      battle_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battle_info, submessage_arena);
    }
    
  } else {
    
  }
  battle_info_ = battle_info;
  // @@protoc_insertion_point(field_set_allocated:PBGameState.battle_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_2eproto
