// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_player_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_player_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "item.pb.h"
#include "location.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_player_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_2eproto;
class PBEquipation;
struct PBEquipationDefaultTypeInternal;
extern PBEquipationDefaultTypeInternal _PBEquipation_default_instance_;
class PBPlayer;
struct PBPlayerDefaultTypeInternal;
extern PBPlayerDefaultTypeInternal _PBPlayer_default_instance_;
class PBSkills;
struct PBSkillsDefaultTypeInternal;
extern PBSkillsDefaultTypeInternal _PBSkills_default_instance_;
class PBStats;
struct PBStatsDefaultTypeInternal;
extern PBStatsDefaultTypeInternal _PBStats_default_instance_;
class PBUser;
struct PBUserDefaultTypeInternal;
extern PBUserDefaultTypeInternal _PBUser_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBEquipation* Arena::CreateMaybeMessage<::PBEquipation>(Arena*);
template<> ::PBPlayer* Arena::CreateMaybeMessage<::PBPlayer>(Arena*);
template<> ::PBSkills* Arena::CreateMaybeMessage<::PBSkills>(Arena*);
template<> ::PBStats* Arena::CreateMaybeMessage<::PBStats>(Arena*);
template<> ::PBUser* Arena::CreateMaybeMessage<::PBUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PBPlayerStats : int {
  HEALTH = 0,
  STRENGTH = 1,
  DEFENSE = 2,
  PRECISION = 3,
  SPEED = 4,
  LUCK = 5,
  PBPlayerStats_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PBPlayerStats_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PBPlayerStats_IsValid(int value);
constexpr PBPlayerStats PBPlayerStats_MIN = HEALTH;
constexpr PBPlayerStats PBPlayerStats_MAX = LUCK;
constexpr int PBPlayerStats_ARRAYSIZE = PBPlayerStats_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBPlayerStats_descriptor();
template<typename T>
inline const std::string& PBPlayerStats_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PBPlayerStats>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PBPlayerStats_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PBPlayerStats_descriptor(), enum_t_value);
}
inline bool PBPlayerStats_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PBPlayerStats* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PBPlayerStats>(
    PBPlayerStats_descriptor(), name, value);
}
enum PBPlayerSkills : int {
  FORAGE = 0,
  MINING = 1,
  COMBAT = 2,
  ATHLETICS = 3,
  PBPlayerSkills_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PBPlayerSkills_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PBPlayerSkills_IsValid(int value);
constexpr PBPlayerSkills PBPlayerSkills_MIN = FORAGE;
constexpr PBPlayerSkills PBPlayerSkills_MAX = ATHLETICS;
constexpr int PBPlayerSkills_ARRAYSIZE = PBPlayerSkills_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBPlayerSkills_descriptor();
template<typename T>
inline const std::string& PBPlayerSkills_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PBPlayerSkills>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PBPlayerSkills_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PBPlayerSkills_descriptor(), enum_t_value);
}
inline bool PBPlayerSkills_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PBPlayerSkills* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PBPlayerSkills>(
    PBPlayerSkills_descriptor(), name, value);
}
// ===================================================================

class PBEquipation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBEquipation) */ {
 public:
  inline PBEquipation() : PBEquipation(nullptr) {}
  ~PBEquipation() override;
  explicit PROTOBUF_CONSTEXPR PBEquipation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBEquipation(const PBEquipation& from);
  PBEquipation(PBEquipation&& from) noexcept
    : PBEquipation() {
    *this = ::std::move(from);
  }

  inline PBEquipation& operator=(const PBEquipation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBEquipation& operator=(PBEquipation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBEquipation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBEquipation* internal_default_instance() {
    return reinterpret_cast<const PBEquipation*>(
               &_PBEquipation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBEquipation& a, PBEquipation& b) {
    a.Swap(&b);
  }
  inline void Swap(PBEquipation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBEquipation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBEquipation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBEquipation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBEquipation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBEquipation& from) {
    PBEquipation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBEquipation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBEquipation";
  }
  protected:
  explicit PBEquipation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttacksFieldNumber = 7,
    kArmorHeadFieldNumber = 1,
    kArmorChestFieldNumber = 2,
    kArmorLeggingsFieldNumber = 3,
    kArmorBootsFieldNumber = 4,
    kWeaponFieldNumber = 5,
    kToolFieldNumber = 6,
  };
  // repeated .PBItemEnum attacks = 7;
  int attacks_size() const;
  private:
  int _internal_attacks_size() const;
  public:
  void clear_attacks();
  private:
  ::PBItemEnum _internal_attacks(int index) const;
  void _internal_add_attacks(::PBItemEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_attacks();
  public:
  ::PBItemEnum attacks(int index) const;
  void set_attacks(int index, ::PBItemEnum value);
  void add_attacks(::PBItemEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& attacks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_attacks();

  // .PBItemEnum armor_head = 1;
  void clear_armor_head();
  ::PBItemEnum armor_head() const;
  void set_armor_head(::PBItemEnum value);
  private:
  ::PBItemEnum _internal_armor_head() const;
  void _internal_set_armor_head(::PBItemEnum value);
  public:

  // .PBItemEnum armor_chest = 2;
  void clear_armor_chest();
  ::PBItemEnum armor_chest() const;
  void set_armor_chest(::PBItemEnum value);
  private:
  ::PBItemEnum _internal_armor_chest() const;
  void _internal_set_armor_chest(::PBItemEnum value);
  public:

  // .PBItemEnum armor_leggings = 3;
  void clear_armor_leggings();
  ::PBItemEnum armor_leggings() const;
  void set_armor_leggings(::PBItemEnum value);
  private:
  ::PBItemEnum _internal_armor_leggings() const;
  void _internal_set_armor_leggings(::PBItemEnum value);
  public:

  // .PBItemEnum armor_boots = 4;
  void clear_armor_boots();
  ::PBItemEnum armor_boots() const;
  void set_armor_boots(::PBItemEnum value);
  private:
  ::PBItemEnum _internal_armor_boots() const;
  void _internal_set_armor_boots(::PBItemEnum value);
  public:

  // .PBItemEnum weapon = 5;
  void clear_weapon();
  ::PBItemEnum weapon() const;
  void set_weapon(::PBItemEnum value);
  private:
  ::PBItemEnum _internal_weapon() const;
  void _internal_set_weapon(::PBItemEnum value);
  public:

  // .PBItemEnum tool = 6;
  void clear_tool();
  ::PBItemEnum tool() const;
  void set_tool(::PBItemEnum value);
  private:
  ::PBItemEnum _internal_tool() const;
  void _internal_set_tool(::PBItemEnum value);
  public:

  // @@protoc_insertion_point(class_scope:PBEquipation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> attacks_;
    mutable std::atomic<int> _attacks_cached_byte_size_;
    int armor_head_;
    int armor_chest_;
    int armor_leggings_;
    int armor_boots_;
    int weapon_;
    int tool_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class PBStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBStats) */ {
 public:
  inline PBStats() : PBStats(nullptr) {}
  ~PBStats() override;
  explicit PROTOBUF_CONSTEXPR PBStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBStats(const PBStats& from);
  PBStats(PBStats&& from) noexcept
    : PBStats() {
    *this = ::std::move(from);
  }

  inline PBStats& operator=(const PBStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBStats& operator=(PBStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBStats* internal_default_instance() {
    return reinterpret_cast<const PBStats*>(
               &_PBStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBStats& a, PBStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PBStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBStats& from) {
    PBStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBStats";
  }
  protected:
  explicit PBStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxHealthFieldNumber = 1,
    kCurrentHealthFieldNumber = 2,
    kStrengthFieldNumber = 3,
    kDefenseFieldNumber = 4,
    kPrecisionFieldNumber = 5,
    kSpeedFieldNumber = 6,
    kLuckFieldNumber = 7,
  };
  // int32 max_health = 1;
  void clear_max_health();
  int32_t max_health() const;
  void set_max_health(int32_t value);
  private:
  int32_t _internal_max_health() const;
  void _internal_set_max_health(int32_t value);
  public:

  // int32 current_health = 2;
  void clear_current_health();
  int32_t current_health() const;
  void set_current_health(int32_t value);
  private:
  int32_t _internal_current_health() const;
  void _internal_set_current_health(int32_t value);
  public:

  // int32 strength = 3;
  void clear_strength();
  int32_t strength() const;
  void set_strength(int32_t value);
  private:
  int32_t _internal_strength() const;
  void _internal_set_strength(int32_t value);
  public:

  // int32 defense = 4;
  void clear_defense();
  int32_t defense() const;
  void set_defense(int32_t value);
  private:
  int32_t _internal_defense() const;
  void _internal_set_defense(int32_t value);
  public:

  // int32 precision = 5;
  void clear_precision();
  int32_t precision() const;
  void set_precision(int32_t value);
  private:
  int32_t _internal_precision() const;
  void _internal_set_precision(int32_t value);
  public:

  // int32 speed = 6;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // int32 luck = 7;
  void clear_luck();
  int32_t luck() const;
  void set_luck(int32_t value);
  private:
  int32_t _internal_luck() const;
  void _internal_set_luck(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t max_health_;
    int32_t current_health_;
    int32_t strength_;
    int32_t defense_;
    int32_t precision_;
    int32_t speed_;
    int32_t luck_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class PBSkills final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBSkills) */ {
 public:
  inline PBSkills() : PBSkills(nullptr) {}
  ~PBSkills() override;
  explicit PROTOBUF_CONSTEXPR PBSkills(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBSkills(const PBSkills& from);
  PBSkills(PBSkills&& from) noexcept
    : PBSkills() {
    *this = ::std::move(from);
  }

  inline PBSkills& operator=(const PBSkills& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBSkills& operator=(PBSkills&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBSkills& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBSkills* internal_default_instance() {
    return reinterpret_cast<const PBSkills*>(
               &_PBSkills_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBSkills& a, PBSkills& b) {
    a.Swap(&b);
  }
  inline void Swap(PBSkills* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBSkills* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBSkills* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBSkills>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBSkills& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBSkills& from) {
    PBSkills::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBSkills* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBSkills";
  }
  protected:
  explicit PBSkills(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForagingXpFieldNumber = 2,
    kForagingLvlFieldNumber = 1,
    kMiningLvlFieldNumber = 3,
    kMiningXpFieldNumber = 4,
    kCombatXpFieldNumber = 6,
    kCombatLvlFieldNumber = 5,
    kAthleticsLvlFieldNumber = 7,
    kAthleticsXpFieldNumber = 8,
  };
  // int64 foraging_xp = 2;
  void clear_foraging_xp();
  int64_t foraging_xp() const;
  void set_foraging_xp(int64_t value);
  private:
  int64_t _internal_foraging_xp() const;
  void _internal_set_foraging_xp(int64_t value);
  public:

  // int32 foraging_lvl = 1;
  void clear_foraging_lvl();
  int32_t foraging_lvl() const;
  void set_foraging_lvl(int32_t value);
  private:
  int32_t _internal_foraging_lvl() const;
  void _internal_set_foraging_lvl(int32_t value);
  public:

  // int32 mining_lvl = 3;
  void clear_mining_lvl();
  int32_t mining_lvl() const;
  void set_mining_lvl(int32_t value);
  private:
  int32_t _internal_mining_lvl() const;
  void _internal_set_mining_lvl(int32_t value);
  public:

  // int64 mining_xp = 4;
  void clear_mining_xp();
  int64_t mining_xp() const;
  void set_mining_xp(int64_t value);
  private:
  int64_t _internal_mining_xp() const;
  void _internal_set_mining_xp(int64_t value);
  public:

  // int64 combat_xp = 6;
  void clear_combat_xp();
  int64_t combat_xp() const;
  void set_combat_xp(int64_t value);
  private:
  int64_t _internal_combat_xp() const;
  void _internal_set_combat_xp(int64_t value);
  public:

  // int32 combat_lvl = 5;
  void clear_combat_lvl();
  int32_t combat_lvl() const;
  void set_combat_lvl(int32_t value);
  private:
  int32_t _internal_combat_lvl() const;
  void _internal_set_combat_lvl(int32_t value);
  public:

  // int32 athletics_lvl = 7;
  void clear_athletics_lvl();
  int32_t athletics_lvl() const;
  void set_athletics_lvl(int32_t value);
  private:
  int32_t _internal_athletics_lvl() const;
  void _internal_set_athletics_lvl(int32_t value);
  public:

  // int64 athletics_xp = 8;
  void clear_athletics_xp();
  int64_t athletics_xp() const;
  void set_athletics_xp(int64_t value);
  private:
  int64_t _internal_athletics_xp() const;
  void _internal_set_athletics_xp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBSkills)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t foraging_xp_;
    int32_t foraging_lvl_;
    int32_t mining_lvl_;
    int64_t mining_xp_;
    int64_t combat_xp_;
    int32_t combat_lvl_;
    int32_t athletics_lvl_;
    int64_t athletics_xp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class PBPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBPlayer) */ {
 public:
  inline PBPlayer() : PBPlayer(nullptr) {}
  ~PBPlayer() override;
  explicit PROTOBUF_CONSTEXPR PBPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBPlayer(const PBPlayer& from);
  PBPlayer(PBPlayer&& from) noexcept
    : PBPlayer() {
    *this = ::std::move(from);
  }

  inline PBPlayer& operator=(const PBPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBPlayer& operator=(PBPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBPlayer* internal_default_instance() {
    return reinterpret_cast<const PBPlayer*>(
               &_PBPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBPlayer& a, PBPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(PBPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBPlayer& from) {
    PBPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBPlayer";
  }
  protected:
  explicit PBPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 7,
    kStatsFieldNumber = 3,
    kSkillsFieldNumber = 4,
    kEquipationFieldNumber = 5,
    kGuildIdFieldNumber = 1,
    kGoldFieldNumber = 6,
    kCurrentLocationFieldNumber = 2,
  };
  // string version = 7;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .PBStats stats = 3;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::PBStats& stats() const;
  PROTOBUF_NODISCARD ::PBStats* release_stats();
  ::PBStats* mutable_stats();
  void set_allocated_stats(::PBStats* stats);
  private:
  const ::PBStats& _internal_stats() const;
  ::PBStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::PBStats* stats);
  ::PBStats* unsafe_arena_release_stats();

  // .PBSkills skills = 4;
  bool has_skills() const;
  private:
  bool _internal_has_skills() const;
  public:
  void clear_skills();
  const ::PBSkills& skills() const;
  PROTOBUF_NODISCARD ::PBSkills* release_skills();
  ::PBSkills* mutable_skills();
  void set_allocated_skills(::PBSkills* skills);
  private:
  const ::PBSkills& _internal_skills() const;
  ::PBSkills* _internal_mutable_skills();
  public:
  void unsafe_arena_set_allocated_skills(
      ::PBSkills* skills);
  ::PBSkills* unsafe_arena_release_skills();

  // .PBEquipation equipation = 5;
  bool has_equipation() const;
  private:
  bool _internal_has_equipation() const;
  public:
  void clear_equipation();
  const ::PBEquipation& equipation() const;
  PROTOBUF_NODISCARD ::PBEquipation* release_equipation();
  ::PBEquipation* mutable_equipation();
  void set_allocated_equipation(::PBEquipation* equipation);
  private:
  const ::PBEquipation& _internal_equipation() const;
  ::PBEquipation* _internal_mutable_equipation();
  public:
  void unsafe_arena_set_allocated_equipation(
      ::PBEquipation* equipation);
  ::PBEquipation* unsafe_arena_release_equipation();

  // uint64 guild_id = 1;
  void clear_guild_id();
  uint64_t guild_id() const;
  void set_guild_id(uint64_t value);
  private:
  uint64_t _internal_guild_id() const;
  void _internal_set_guild_id(uint64_t value);
  public:

  // int64 gold = 6;
  void clear_gold();
  int64_t gold() const;
  void set_gold(int64_t value);
  private:
  int64_t _internal_gold() const;
  void _internal_set_gold(int64_t value);
  public:

  // .PBLocationID current_location = 2;
  void clear_current_location();
  ::PBLocationID current_location() const;
  void set_current_location(::PBLocationID value);
  private:
  ::PBLocationID _internal_current_location() const;
  void _internal_set_current_location(::PBLocationID value);
  public:

  // @@protoc_insertion_point(class_scope:PBPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PBStats* stats_;
    ::PBSkills* skills_;
    ::PBEquipation* equipation_;
    uint64_t guild_id_;
    int64_t gold_;
    int current_location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class PBUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBUser) */ {
 public:
  inline PBUser() : PBUser(nullptr) {}
  ~PBUser() override;
  explicit PROTOBUF_CONSTEXPR PBUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBUser(const PBUser& from);
  PBUser(PBUser&& from) noexcept
    : PBUser() {
    *this = ::std::move(from);
  }

  inline PBUser& operator=(const PBUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBUser& operator=(PBUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBUser* internal_default_instance() {
    return reinterpret_cast<const PBUser*>(
               &_PBUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PBUser& a, PBUser& b) {
    a.Swap(&b);
  }
  inline void Swap(PBUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBUser& from) {
    PBUser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBUser";
  }
  protected:
  explicit PBUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 5,
    kUserNameFieldNumber = 2,
    kLastOnlineFieldNumber = 4,
    kDiscordIdFieldNumber = 1,
    kCurrentPlayerIdFieldNumber = 3,
  };
  // repeated .PBPlayer players = 5;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::PBPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBPlayer >*
      mutable_players();
  private:
  const ::PBPlayer& _internal_players(int index) const;
  ::PBPlayer* _internal_add_players();
  public:
  const ::PBPlayer& players(int index) const;
  ::PBPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBPlayer >&
      players() const;

  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // .google.protobuf.Timestamp last_online = 4;
  bool has_last_online() const;
  private:
  bool _internal_has_last_online() const;
  public:
  void clear_last_online();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_online() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_online();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_online();
  void set_allocated_last_online(::PROTOBUF_NAMESPACE_ID::Timestamp* last_online);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_online() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_online();
  public:
  void unsafe_arena_set_allocated_last_online(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_online);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_online();

  // uint64 discord_id = 1;
  void clear_discord_id();
  uint64_t discord_id() const;
  void set_discord_id(uint64_t value);
  private:
  uint64_t _internal_discord_id() const;
  void _internal_set_discord_id(uint64_t value);
  public:

  // int32 current_player_id = 3;
  void clear_current_player_id();
  int32_t current_player_id() const;
  void set_current_player_id(int32_t value);
  private:
  int32_t _internal_current_player_id() const;
  void _internal_set_current_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBPlayer > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_online_;
    uint64_t discord_id_;
    int32_t current_player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBEquipation

// .PBItemEnum armor_head = 1;
inline void PBEquipation::clear_armor_head() {
  _impl_.armor_head_ = 0;
}
inline ::PBItemEnum PBEquipation::_internal_armor_head() const {
  return static_cast< ::PBItemEnum >(_impl_.armor_head_);
}
inline ::PBItemEnum PBEquipation::armor_head() const {
  // @@protoc_insertion_point(field_get:PBEquipation.armor_head)
  return _internal_armor_head();
}
inline void PBEquipation::_internal_set_armor_head(::PBItemEnum value) {
  
  _impl_.armor_head_ = value;
}
inline void PBEquipation::set_armor_head(::PBItemEnum value) {
  _internal_set_armor_head(value);
  // @@protoc_insertion_point(field_set:PBEquipation.armor_head)
}

// .PBItemEnum armor_chest = 2;
inline void PBEquipation::clear_armor_chest() {
  _impl_.armor_chest_ = 0;
}
inline ::PBItemEnum PBEquipation::_internal_armor_chest() const {
  return static_cast< ::PBItemEnum >(_impl_.armor_chest_);
}
inline ::PBItemEnum PBEquipation::armor_chest() const {
  // @@protoc_insertion_point(field_get:PBEquipation.armor_chest)
  return _internal_armor_chest();
}
inline void PBEquipation::_internal_set_armor_chest(::PBItemEnum value) {
  
  _impl_.armor_chest_ = value;
}
inline void PBEquipation::set_armor_chest(::PBItemEnum value) {
  _internal_set_armor_chest(value);
  // @@protoc_insertion_point(field_set:PBEquipation.armor_chest)
}

// .PBItemEnum armor_leggings = 3;
inline void PBEquipation::clear_armor_leggings() {
  _impl_.armor_leggings_ = 0;
}
inline ::PBItemEnum PBEquipation::_internal_armor_leggings() const {
  return static_cast< ::PBItemEnum >(_impl_.armor_leggings_);
}
inline ::PBItemEnum PBEquipation::armor_leggings() const {
  // @@protoc_insertion_point(field_get:PBEquipation.armor_leggings)
  return _internal_armor_leggings();
}
inline void PBEquipation::_internal_set_armor_leggings(::PBItemEnum value) {
  
  _impl_.armor_leggings_ = value;
}
inline void PBEquipation::set_armor_leggings(::PBItemEnum value) {
  _internal_set_armor_leggings(value);
  // @@protoc_insertion_point(field_set:PBEquipation.armor_leggings)
}

// .PBItemEnum armor_boots = 4;
inline void PBEquipation::clear_armor_boots() {
  _impl_.armor_boots_ = 0;
}
inline ::PBItemEnum PBEquipation::_internal_armor_boots() const {
  return static_cast< ::PBItemEnum >(_impl_.armor_boots_);
}
inline ::PBItemEnum PBEquipation::armor_boots() const {
  // @@protoc_insertion_point(field_get:PBEquipation.armor_boots)
  return _internal_armor_boots();
}
inline void PBEquipation::_internal_set_armor_boots(::PBItemEnum value) {
  
  _impl_.armor_boots_ = value;
}
inline void PBEquipation::set_armor_boots(::PBItemEnum value) {
  _internal_set_armor_boots(value);
  // @@protoc_insertion_point(field_set:PBEquipation.armor_boots)
}

// .PBItemEnum weapon = 5;
inline void PBEquipation::clear_weapon() {
  _impl_.weapon_ = 0;
}
inline ::PBItemEnum PBEquipation::_internal_weapon() const {
  return static_cast< ::PBItemEnum >(_impl_.weapon_);
}
inline ::PBItemEnum PBEquipation::weapon() const {
  // @@protoc_insertion_point(field_get:PBEquipation.weapon)
  return _internal_weapon();
}
inline void PBEquipation::_internal_set_weapon(::PBItemEnum value) {
  
  _impl_.weapon_ = value;
}
inline void PBEquipation::set_weapon(::PBItemEnum value) {
  _internal_set_weapon(value);
  // @@protoc_insertion_point(field_set:PBEquipation.weapon)
}

// .PBItemEnum tool = 6;
inline void PBEquipation::clear_tool() {
  _impl_.tool_ = 0;
}
inline ::PBItemEnum PBEquipation::_internal_tool() const {
  return static_cast< ::PBItemEnum >(_impl_.tool_);
}
inline ::PBItemEnum PBEquipation::tool() const {
  // @@protoc_insertion_point(field_get:PBEquipation.tool)
  return _internal_tool();
}
inline void PBEquipation::_internal_set_tool(::PBItemEnum value) {
  
  _impl_.tool_ = value;
}
inline void PBEquipation::set_tool(::PBItemEnum value) {
  _internal_set_tool(value);
  // @@protoc_insertion_point(field_set:PBEquipation.tool)
}

// repeated .PBItemEnum attacks = 7;
inline int PBEquipation::_internal_attacks_size() const {
  return _impl_.attacks_.size();
}
inline int PBEquipation::attacks_size() const {
  return _internal_attacks_size();
}
inline void PBEquipation::clear_attacks() {
  _impl_.attacks_.Clear();
}
inline ::PBItemEnum PBEquipation::_internal_attacks(int index) const {
  return static_cast< ::PBItemEnum >(_impl_.attacks_.Get(index));
}
inline ::PBItemEnum PBEquipation::attacks(int index) const {
  // @@protoc_insertion_point(field_get:PBEquipation.attacks)
  return _internal_attacks(index);
}
inline void PBEquipation::set_attacks(int index, ::PBItemEnum value) {
  _impl_.attacks_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBEquipation.attacks)
}
inline void PBEquipation::_internal_add_attacks(::PBItemEnum value) {
  _impl_.attacks_.Add(value);
}
inline void PBEquipation::add_attacks(::PBItemEnum value) {
  _internal_add_attacks(value);
  // @@protoc_insertion_point(field_add:PBEquipation.attacks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PBEquipation::attacks() const {
  // @@protoc_insertion_point(field_list:PBEquipation.attacks)
  return _impl_.attacks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PBEquipation::_internal_mutable_attacks() {
  return &_impl_.attacks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PBEquipation::mutable_attacks() {
  // @@protoc_insertion_point(field_mutable_list:PBEquipation.attacks)
  return _internal_mutable_attacks();
}

// -------------------------------------------------------------------

// PBStats

// int32 max_health = 1;
inline void PBStats::clear_max_health() {
  _impl_.max_health_ = 0;
}
inline int32_t PBStats::_internal_max_health() const {
  return _impl_.max_health_;
}
inline int32_t PBStats::max_health() const {
  // @@protoc_insertion_point(field_get:PBStats.max_health)
  return _internal_max_health();
}
inline void PBStats::_internal_set_max_health(int32_t value) {
  
  _impl_.max_health_ = value;
}
inline void PBStats::set_max_health(int32_t value) {
  _internal_set_max_health(value);
  // @@protoc_insertion_point(field_set:PBStats.max_health)
}

// int32 current_health = 2;
inline void PBStats::clear_current_health() {
  _impl_.current_health_ = 0;
}
inline int32_t PBStats::_internal_current_health() const {
  return _impl_.current_health_;
}
inline int32_t PBStats::current_health() const {
  // @@protoc_insertion_point(field_get:PBStats.current_health)
  return _internal_current_health();
}
inline void PBStats::_internal_set_current_health(int32_t value) {
  
  _impl_.current_health_ = value;
}
inline void PBStats::set_current_health(int32_t value) {
  _internal_set_current_health(value);
  // @@protoc_insertion_point(field_set:PBStats.current_health)
}

// int32 strength = 3;
inline void PBStats::clear_strength() {
  _impl_.strength_ = 0;
}
inline int32_t PBStats::_internal_strength() const {
  return _impl_.strength_;
}
inline int32_t PBStats::strength() const {
  // @@protoc_insertion_point(field_get:PBStats.strength)
  return _internal_strength();
}
inline void PBStats::_internal_set_strength(int32_t value) {
  
  _impl_.strength_ = value;
}
inline void PBStats::set_strength(int32_t value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:PBStats.strength)
}

// int32 defense = 4;
inline void PBStats::clear_defense() {
  _impl_.defense_ = 0;
}
inline int32_t PBStats::_internal_defense() const {
  return _impl_.defense_;
}
inline int32_t PBStats::defense() const {
  // @@protoc_insertion_point(field_get:PBStats.defense)
  return _internal_defense();
}
inline void PBStats::_internal_set_defense(int32_t value) {
  
  _impl_.defense_ = value;
}
inline void PBStats::set_defense(int32_t value) {
  _internal_set_defense(value);
  // @@protoc_insertion_point(field_set:PBStats.defense)
}

// int32 precision = 5;
inline void PBStats::clear_precision() {
  _impl_.precision_ = 0;
}
inline int32_t PBStats::_internal_precision() const {
  return _impl_.precision_;
}
inline int32_t PBStats::precision() const {
  // @@protoc_insertion_point(field_get:PBStats.precision)
  return _internal_precision();
}
inline void PBStats::_internal_set_precision(int32_t value) {
  
  _impl_.precision_ = value;
}
inline void PBStats::set_precision(int32_t value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:PBStats.precision)
}

// int32 speed = 6;
inline void PBStats::clear_speed() {
  _impl_.speed_ = 0;
}
inline int32_t PBStats::_internal_speed() const {
  return _impl_.speed_;
}
inline int32_t PBStats::speed() const {
  // @@protoc_insertion_point(field_get:PBStats.speed)
  return _internal_speed();
}
inline void PBStats::_internal_set_speed(int32_t value) {
  
  _impl_.speed_ = value;
}
inline void PBStats::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:PBStats.speed)
}

// int32 luck = 7;
inline void PBStats::clear_luck() {
  _impl_.luck_ = 0;
}
inline int32_t PBStats::_internal_luck() const {
  return _impl_.luck_;
}
inline int32_t PBStats::luck() const {
  // @@protoc_insertion_point(field_get:PBStats.luck)
  return _internal_luck();
}
inline void PBStats::_internal_set_luck(int32_t value) {
  
  _impl_.luck_ = value;
}
inline void PBStats::set_luck(int32_t value) {
  _internal_set_luck(value);
  // @@protoc_insertion_point(field_set:PBStats.luck)
}

// -------------------------------------------------------------------

// PBSkills

// int32 foraging_lvl = 1;
inline void PBSkills::clear_foraging_lvl() {
  _impl_.foraging_lvl_ = 0;
}
inline int32_t PBSkills::_internal_foraging_lvl() const {
  return _impl_.foraging_lvl_;
}
inline int32_t PBSkills::foraging_lvl() const {
  // @@protoc_insertion_point(field_get:PBSkills.foraging_lvl)
  return _internal_foraging_lvl();
}
inline void PBSkills::_internal_set_foraging_lvl(int32_t value) {
  
  _impl_.foraging_lvl_ = value;
}
inline void PBSkills::set_foraging_lvl(int32_t value) {
  _internal_set_foraging_lvl(value);
  // @@protoc_insertion_point(field_set:PBSkills.foraging_lvl)
}

// int64 foraging_xp = 2;
inline void PBSkills::clear_foraging_xp() {
  _impl_.foraging_xp_ = int64_t{0};
}
inline int64_t PBSkills::_internal_foraging_xp() const {
  return _impl_.foraging_xp_;
}
inline int64_t PBSkills::foraging_xp() const {
  // @@protoc_insertion_point(field_get:PBSkills.foraging_xp)
  return _internal_foraging_xp();
}
inline void PBSkills::_internal_set_foraging_xp(int64_t value) {
  
  _impl_.foraging_xp_ = value;
}
inline void PBSkills::set_foraging_xp(int64_t value) {
  _internal_set_foraging_xp(value);
  // @@protoc_insertion_point(field_set:PBSkills.foraging_xp)
}

// int32 mining_lvl = 3;
inline void PBSkills::clear_mining_lvl() {
  _impl_.mining_lvl_ = 0;
}
inline int32_t PBSkills::_internal_mining_lvl() const {
  return _impl_.mining_lvl_;
}
inline int32_t PBSkills::mining_lvl() const {
  // @@protoc_insertion_point(field_get:PBSkills.mining_lvl)
  return _internal_mining_lvl();
}
inline void PBSkills::_internal_set_mining_lvl(int32_t value) {
  
  _impl_.mining_lvl_ = value;
}
inline void PBSkills::set_mining_lvl(int32_t value) {
  _internal_set_mining_lvl(value);
  // @@protoc_insertion_point(field_set:PBSkills.mining_lvl)
}

// int64 mining_xp = 4;
inline void PBSkills::clear_mining_xp() {
  _impl_.mining_xp_ = int64_t{0};
}
inline int64_t PBSkills::_internal_mining_xp() const {
  return _impl_.mining_xp_;
}
inline int64_t PBSkills::mining_xp() const {
  // @@protoc_insertion_point(field_get:PBSkills.mining_xp)
  return _internal_mining_xp();
}
inline void PBSkills::_internal_set_mining_xp(int64_t value) {
  
  _impl_.mining_xp_ = value;
}
inline void PBSkills::set_mining_xp(int64_t value) {
  _internal_set_mining_xp(value);
  // @@protoc_insertion_point(field_set:PBSkills.mining_xp)
}

// int32 combat_lvl = 5;
inline void PBSkills::clear_combat_lvl() {
  _impl_.combat_lvl_ = 0;
}
inline int32_t PBSkills::_internal_combat_lvl() const {
  return _impl_.combat_lvl_;
}
inline int32_t PBSkills::combat_lvl() const {
  // @@protoc_insertion_point(field_get:PBSkills.combat_lvl)
  return _internal_combat_lvl();
}
inline void PBSkills::_internal_set_combat_lvl(int32_t value) {
  
  _impl_.combat_lvl_ = value;
}
inline void PBSkills::set_combat_lvl(int32_t value) {
  _internal_set_combat_lvl(value);
  // @@protoc_insertion_point(field_set:PBSkills.combat_lvl)
}

// int64 combat_xp = 6;
inline void PBSkills::clear_combat_xp() {
  _impl_.combat_xp_ = int64_t{0};
}
inline int64_t PBSkills::_internal_combat_xp() const {
  return _impl_.combat_xp_;
}
inline int64_t PBSkills::combat_xp() const {
  // @@protoc_insertion_point(field_get:PBSkills.combat_xp)
  return _internal_combat_xp();
}
inline void PBSkills::_internal_set_combat_xp(int64_t value) {
  
  _impl_.combat_xp_ = value;
}
inline void PBSkills::set_combat_xp(int64_t value) {
  _internal_set_combat_xp(value);
  // @@protoc_insertion_point(field_set:PBSkills.combat_xp)
}

// int32 athletics_lvl = 7;
inline void PBSkills::clear_athletics_lvl() {
  _impl_.athletics_lvl_ = 0;
}
inline int32_t PBSkills::_internal_athletics_lvl() const {
  return _impl_.athletics_lvl_;
}
inline int32_t PBSkills::athletics_lvl() const {
  // @@protoc_insertion_point(field_get:PBSkills.athletics_lvl)
  return _internal_athletics_lvl();
}
inline void PBSkills::_internal_set_athletics_lvl(int32_t value) {
  
  _impl_.athletics_lvl_ = value;
}
inline void PBSkills::set_athletics_lvl(int32_t value) {
  _internal_set_athletics_lvl(value);
  // @@protoc_insertion_point(field_set:PBSkills.athletics_lvl)
}

// int64 athletics_xp = 8;
inline void PBSkills::clear_athletics_xp() {
  _impl_.athletics_xp_ = int64_t{0};
}
inline int64_t PBSkills::_internal_athletics_xp() const {
  return _impl_.athletics_xp_;
}
inline int64_t PBSkills::athletics_xp() const {
  // @@protoc_insertion_point(field_get:PBSkills.athletics_xp)
  return _internal_athletics_xp();
}
inline void PBSkills::_internal_set_athletics_xp(int64_t value) {
  
  _impl_.athletics_xp_ = value;
}
inline void PBSkills::set_athletics_xp(int64_t value) {
  _internal_set_athletics_xp(value);
  // @@protoc_insertion_point(field_set:PBSkills.athletics_xp)
}

// -------------------------------------------------------------------

// PBPlayer

// uint64 guild_id = 1;
inline void PBPlayer::clear_guild_id() {
  _impl_.guild_id_ = uint64_t{0u};
}
inline uint64_t PBPlayer::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint64_t PBPlayer::guild_id() const {
  // @@protoc_insertion_point(field_get:PBPlayer.guild_id)
  return _internal_guild_id();
}
inline void PBPlayer::_internal_set_guild_id(uint64_t value) {
  
  _impl_.guild_id_ = value;
}
inline void PBPlayer::set_guild_id(uint64_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:PBPlayer.guild_id)
}

// .PBLocationID current_location = 2;
inline void PBPlayer::clear_current_location() {
  _impl_.current_location_ = 0;
}
inline ::PBLocationID PBPlayer::_internal_current_location() const {
  return static_cast< ::PBLocationID >(_impl_.current_location_);
}
inline ::PBLocationID PBPlayer::current_location() const {
  // @@protoc_insertion_point(field_get:PBPlayer.current_location)
  return _internal_current_location();
}
inline void PBPlayer::_internal_set_current_location(::PBLocationID value) {
  
  _impl_.current_location_ = value;
}
inline void PBPlayer::set_current_location(::PBLocationID value) {
  _internal_set_current_location(value);
  // @@protoc_insertion_point(field_set:PBPlayer.current_location)
}

// .PBStats stats = 3;
inline bool PBPlayer::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool PBPlayer::has_stats() const {
  return _internal_has_stats();
}
inline void PBPlayer::clear_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
}
inline const ::PBStats& PBPlayer::_internal_stats() const {
  const ::PBStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBStats&>(
      ::_PBStats_default_instance_);
}
inline const ::PBStats& PBPlayer::stats() const {
  // @@protoc_insertion_point(field_get:PBPlayer.stats)
  return _internal_stats();
}
inline void PBPlayer::unsafe_arena_set_allocated_stats(
    ::PBStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBPlayer.stats)
}
inline ::PBStats* PBPlayer::release_stats() {
  
  ::PBStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBStats* PBPlayer::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:PBPlayer.stats)
  
  ::PBStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::PBStats* PBPlayer::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::PBStats* PBPlayer::mutable_stats() {
  ::PBStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:PBPlayer.stats)
  return _msg;
}
inline void PBPlayer::set_allocated_stats(::PBStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:PBPlayer.stats)
}

// .PBSkills skills = 4;
inline bool PBPlayer::_internal_has_skills() const {
  return this != internal_default_instance() && _impl_.skills_ != nullptr;
}
inline bool PBPlayer::has_skills() const {
  return _internal_has_skills();
}
inline void PBPlayer::clear_skills() {
  if (GetArenaForAllocation() == nullptr && _impl_.skills_ != nullptr) {
    delete _impl_.skills_;
  }
  _impl_.skills_ = nullptr;
}
inline const ::PBSkills& PBPlayer::_internal_skills() const {
  const ::PBSkills* p = _impl_.skills_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSkills&>(
      ::_PBSkills_default_instance_);
}
inline const ::PBSkills& PBPlayer::skills() const {
  // @@protoc_insertion_point(field_get:PBPlayer.skills)
  return _internal_skills();
}
inline void PBPlayer::unsafe_arena_set_allocated_skills(
    ::PBSkills* skills) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skills_);
  }
  _impl_.skills_ = skills;
  if (skills) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBPlayer.skills)
}
inline ::PBSkills* PBPlayer::release_skills() {
  
  ::PBSkills* temp = _impl_.skills_;
  _impl_.skills_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSkills* PBPlayer::unsafe_arena_release_skills() {
  // @@protoc_insertion_point(field_release:PBPlayer.skills)
  
  ::PBSkills* temp = _impl_.skills_;
  _impl_.skills_ = nullptr;
  return temp;
}
inline ::PBSkills* PBPlayer::_internal_mutable_skills() {
  
  if (_impl_.skills_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSkills>(GetArenaForAllocation());
    _impl_.skills_ = p;
  }
  return _impl_.skills_;
}
inline ::PBSkills* PBPlayer::mutable_skills() {
  ::PBSkills* _msg = _internal_mutable_skills();
  // @@protoc_insertion_point(field_mutable:PBPlayer.skills)
  return _msg;
}
inline void PBPlayer::set_allocated_skills(::PBSkills* skills) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skills_;
  }
  if (skills) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skills);
    if (message_arena != submessage_arena) {
      skills = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skills, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skills_ = skills;
  // @@protoc_insertion_point(field_set_allocated:PBPlayer.skills)
}

// .PBEquipation equipation = 5;
inline bool PBPlayer::_internal_has_equipation() const {
  return this != internal_default_instance() && _impl_.equipation_ != nullptr;
}
inline bool PBPlayer::has_equipation() const {
  return _internal_has_equipation();
}
inline void PBPlayer::clear_equipation() {
  if (GetArenaForAllocation() == nullptr && _impl_.equipation_ != nullptr) {
    delete _impl_.equipation_;
  }
  _impl_.equipation_ = nullptr;
}
inline const ::PBEquipation& PBPlayer::_internal_equipation() const {
  const ::PBEquipation* p = _impl_.equipation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBEquipation&>(
      ::_PBEquipation_default_instance_);
}
inline const ::PBEquipation& PBPlayer::equipation() const {
  // @@protoc_insertion_point(field_get:PBPlayer.equipation)
  return _internal_equipation();
}
inline void PBPlayer::unsafe_arena_set_allocated_equipation(
    ::PBEquipation* equipation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipation_);
  }
  _impl_.equipation_ = equipation;
  if (equipation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBPlayer.equipation)
}
inline ::PBEquipation* PBPlayer::release_equipation() {
  
  ::PBEquipation* temp = _impl_.equipation_;
  _impl_.equipation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBEquipation* PBPlayer::unsafe_arena_release_equipation() {
  // @@protoc_insertion_point(field_release:PBPlayer.equipation)
  
  ::PBEquipation* temp = _impl_.equipation_;
  _impl_.equipation_ = nullptr;
  return temp;
}
inline ::PBEquipation* PBPlayer::_internal_mutable_equipation() {
  
  if (_impl_.equipation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBEquipation>(GetArenaForAllocation());
    _impl_.equipation_ = p;
  }
  return _impl_.equipation_;
}
inline ::PBEquipation* PBPlayer::mutable_equipation() {
  ::PBEquipation* _msg = _internal_mutable_equipation();
  // @@protoc_insertion_point(field_mutable:PBPlayer.equipation)
  return _msg;
}
inline void PBPlayer::set_allocated_equipation(::PBEquipation* equipation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.equipation_;
  }
  if (equipation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(equipation);
    if (message_arena != submessage_arena) {
      equipation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.equipation_ = equipation;
  // @@protoc_insertion_point(field_set_allocated:PBPlayer.equipation)
}

// int64 gold = 6;
inline void PBPlayer::clear_gold() {
  _impl_.gold_ = int64_t{0};
}
inline int64_t PBPlayer::_internal_gold() const {
  return _impl_.gold_;
}
inline int64_t PBPlayer::gold() const {
  // @@protoc_insertion_point(field_get:PBPlayer.gold)
  return _internal_gold();
}
inline void PBPlayer::_internal_set_gold(int64_t value) {
  
  _impl_.gold_ = value;
}
inline void PBPlayer::set_gold(int64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:PBPlayer.gold)
}

// string version = 7;
inline void PBPlayer::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& PBPlayer::version() const {
  // @@protoc_insertion_point(field_get:PBPlayer.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBPlayer::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBPlayer.version)
}
inline std::string* PBPlayer::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:PBPlayer.version)
  return _s;
}
inline const std::string& PBPlayer::_internal_version() const {
  return _impl_.version_.Get();
}
inline void PBPlayer::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* PBPlayer::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* PBPlayer::release_version() {
  // @@protoc_insertion_point(field_release:PBPlayer.version)
  return _impl_.version_.Release();
}
inline void PBPlayer::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBPlayer.version)
}

// -------------------------------------------------------------------

// PBUser

// uint64 discord_id = 1;
inline void PBUser::clear_discord_id() {
  _impl_.discord_id_ = uint64_t{0u};
}
inline uint64_t PBUser::_internal_discord_id() const {
  return _impl_.discord_id_;
}
inline uint64_t PBUser::discord_id() const {
  // @@protoc_insertion_point(field_get:PBUser.discord_id)
  return _internal_discord_id();
}
inline void PBUser::_internal_set_discord_id(uint64_t value) {
  
  _impl_.discord_id_ = value;
}
inline void PBUser::set_discord_id(uint64_t value) {
  _internal_set_discord_id(value);
  // @@protoc_insertion_point(field_set:PBUser.discord_id)
}

// string user_name = 2;
inline void PBUser::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& PBUser::user_name() const {
  // @@protoc_insertion_point(field_get:PBUser.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBUser::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBUser.user_name)
}
inline std::string* PBUser::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:PBUser.user_name)
  return _s;
}
inline const std::string& PBUser::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void PBUser::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PBUser::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PBUser::release_user_name() {
  // @@protoc_insertion_point(field_release:PBUser.user_name)
  return _impl_.user_name_.Release();
}
inline void PBUser::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBUser.user_name)
}

// int32 current_player_id = 3;
inline void PBUser::clear_current_player_id() {
  _impl_.current_player_id_ = 0;
}
inline int32_t PBUser::_internal_current_player_id() const {
  return _impl_.current_player_id_;
}
inline int32_t PBUser::current_player_id() const {
  // @@protoc_insertion_point(field_get:PBUser.current_player_id)
  return _internal_current_player_id();
}
inline void PBUser::_internal_set_current_player_id(int32_t value) {
  
  _impl_.current_player_id_ = value;
}
inline void PBUser::set_current_player_id(int32_t value) {
  _internal_set_current_player_id(value);
  // @@protoc_insertion_point(field_set:PBUser.current_player_id)
}

// .google.protobuf.Timestamp last_online = 4;
inline bool PBUser::_internal_has_last_online() const {
  return this != internal_default_instance() && _impl_.last_online_ != nullptr;
}
inline bool PBUser::has_last_online() const {
  return _internal_has_last_online();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PBUser::_internal_last_online() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_online_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PBUser::last_online() const {
  // @@protoc_insertion_point(field_get:PBUser.last_online)
  return _internal_last_online();
}
inline void PBUser::unsafe_arena_set_allocated_last_online(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_online) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_online_);
  }
  _impl_.last_online_ = last_online;
  if (last_online) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBUser.last_online)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PBUser::release_last_online() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_online_;
  _impl_.last_online_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PBUser::unsafe_arena_release_last_online() {
  // @@protoc_insertion_point(field_release:PBUser.last_online)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_online_;
  _impl_.last_online_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PBUser::_internal_mutable_last_online() {
  
  if (_impl_.last_online_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_online_ = p;
  }
  return _impl_.last_online_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PBUser::mutable_last_online() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_online();
  // @@protoc_insertion_point(field_mutable:PBUser.last_online)
  return _msg;
}
inline void PBUser::set_allocated_last_online(::PROTOBUF_NAMESPACE_ID::Timestamp* last_online) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_online_);
  }
  if (last_online) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_online));
    if (message_arena != submessage_arena) {
      last_online = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_online, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_online_ = last_online;
  // @@protoc_insertion_point(field_set_allocated:PBUser.last_online)
}

// repeated .PBPlayer players = 5;
inline int PBUser::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int PBUser::players_size() const {
  return _internal_players_size();
}
inline void PBUser::clear_players() {
  _impl_.players_.Clear();
}
inline ::PBPlayer* PBUser::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:PBUser.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBPlayer >*
PBUser::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:PBUser.players)
  return &_impl_.players_;
}
inline const ::PBPlayer& PBUser::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::PBPlayer& PBUser::players(int index) const {
  // @@protoc_insertion_point(field_get:PBUser.players)
  return _internal_players(index);
}
inline ::PBPlayer* PBUser::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::PBPlayer* PBUser::add_players() {
  ::PBPlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:PBUser.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBPlayer >&
PBUser::players() const {
  // @@protoc_insertion_point(field_list:PBUser.players)
  return _impl_.players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PBPlayerStats> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBPlayerStats>() {
  return ::PBPlayerStats_descriptor();
}
template <> struct is_proto_enum< ::PBPlayerSkills> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBPlayerSkills>() {
  return ::PBPlayerSkills_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_player_2eproto
