// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PBItemData::PBItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sell_value_)*/0
  , /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PBItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBItemDataDefaultTypeInternal() {}
  union {
    PBItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBItemDataDefaultTypeInternal _PBItemData_default_instance_;
PROTOBUF_CONSTEXPR PBItemsDict::PBItemsDict(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.item_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PBItemsDictDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBItemsDictDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBItemsDictDefaultTypeInternal() {}
  union {
    PBItemsDict _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBItemsDictDefaultTypeInternal _PBItemsDict_default_instance_;
static ::_pb::Metadata file_level_metadata_item_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_item_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_item_2eproto = nullptr;

const uint32_t TableStruct_item_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBItemData, _impl_.image_path_),
  PROTOBUF_FIELD_OFFSET(::PBItemData, _impl_.item_name_),
  PROTOBUF_FIELD_OFFSET(::PBItemData, _impl_.sell_value_),
  PROTOBUF_FIELD_OFFSET(::PBItemData, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::PBItemData, _impl_.quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBItemsDict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBItemsDict, _impl_.item_type_),
  PROTOBUF_FIELD_OFFSET(::PBItemsDict, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PBItemData)},
  { 11, -1, -1, sizeof(::PBItemsDict)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PBItemData_default_instance_._instance,
  &::_PBItemsDict_default_instance_._instance,
};

const char descriptor_table_protodef_item_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nitem.proto\"w\n\nPBItemData\022\022\n\nimage_path"
  "\030\001 \001(\t\022\021\n\titem_name\030\002 \001(\t\022\022\n\nsell_value\030"
  "\003 \001(\005\022\034\n\007item_id\030\004 \001(\0162\013.PBItemEnum\022\020\n\010q"
  "uantity\030\005 \001(\005\"H\n\013PBItemsDict\022\036\n\titem_typ"
  "e\030\001 \001(\0162\013.PBItemType\022\031\n\004data\030\002 \003(\0132\013.PBI"
  "temData*\247\001\n\nPBItemEnum\022\t\n\005STICK\020\000\022\n\n\006PEB"
  "BLE\020\001\022\010\n\004ROCK\020\002\022\010\n\004DIRT\020\003\022\010\n\004IRON\020\004\022\010\n\004C"
  "OAL\020\005\022\010\n\004WOOD\020\006\022\010\n\004CLAY\020\007\022\010\n\004BONE\020\010\022\n\n\005P"
  "UNCH\020\350\007\022\t\n\004KICK\020\351\007\022\021\n\014WOODEN_SWORD\020\320\017\022\022\n"
  "\rWOODEN_HELMET\020\270\027*a\n\nPBItemType\022\r\n\tRESOU"
  "RCES\020\000\022\013\n\007ATTACKS\020\001\022\013\n\007WEAPONS\020\002\022\r\n\tEQUI"
  "PMENT\020\003\022\017\n\013QUEST_ITEMS\020\004\022\n\n\006BUILDS\020\005b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_item_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_item_2eproto = {
    false, false, 484, descriptor_table_protodef_item_2eproto,
    "item.proto",
    &descriptor_table_item_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_item_2eproto::offsets,
    file_level_metadata_item_2eproto, file_level_enum_descriptors_item_2eproto,
    file_level_service_descriptors_item_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_item_2eproto_getter() {
  return &descriptor_table_item_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_item_2eproto(&descriptor_table_item_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBItemEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_item_2eproto);
  return file_level_enum_descriptors_item_2eproto[0];
}
bool PBItemEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 1000:
    case 1001:
    case 2000:
    case 3000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_item_2eproto);
  return file_level_enum_descriptors_item_2eproto[1];
}
bool PBItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PBItemData::_Internal {
 public:
};

PBItemData::PBItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBItemData)
}
PBItemData::PBItemData(const PBItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_path_){}
    , decltype(_impl_.item_name_){}
    , decltype(_impl_.sell_value_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_path().empty()) {
    _this->_impl_.image_path_.Set(from._internal_image_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item_name().empty()) {
    _this->_impl_.item_name_.Set(from._internal_item_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sell_value_, &from._impl_.sell_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.sell_value_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:PBItemData)
}

inline void PBItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_path_){}
    , decltype(_impl_.item_name_){}
    , decltype(_impl_.sell_value_){0}
    , decltype(_impl_.item_id_){0}
    , decltype(_impl_.quantity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBItemData::~PBItemData() {
  // @@protoc_insertion_point(destructor:PBItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_path_.Destroy();
  _impl_.item_name_.Destroy();
}

void PBItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:PBItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_path_.ClearToEmpty();
  _impl_.item_name_.ClearToEmpty();
  ::memset(&_impl_.sell_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.sell_value_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string image_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PBItemData.image_path"));
        } else
          goto handle_unusual;
        continue;
      // string item_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_item_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PBItemData.item_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 sell_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sell_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PBItemEnum item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_id(static_cast<::PBItemEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_path = 1;
  if (!this->_internal_image_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_path().data(), static_cast<int>(this->_internal_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBItemData.image_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image_path(), target);
  }

  // string item_name = 2;
  if (!this->_internal_item_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBItemData.item_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_item_name(), target);
  }

  // int32 sell_value = 3;
  if (this->_internal_sell_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sell_value(), target);
  }

  // .PBItemEnum item_id = 4;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_item_id(), target);
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBItemData)
  return target;
}

size_t PBItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_path = 1;
  if (!this->_internal_image_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_path());
  }

  // string item_name = 2;
  if (!this->_internal_item_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_name());
  }

  // int32 sell_value = 3;
  if (this->_internal_sell_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sell_value());
  }

  // .PBItemEnum item_id = 4;
  if (this->_internal_item_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_item_id());
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBItemData::GetClassData() const { return &_class_data_; }


void PBItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBItemData*>(&to_msg);
  auto& from = static_cast<const PBItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image_path().empty()) {
    _this->_internal_set_image_path(from._internal_image_path());
  }
  if (!from._internal_item_name().empty()) {
    _this->_internal_set_item_name(from._internal_item_name());
  }
  if (from._internal_sell_value() != 0) {
    _this->_internal_set_sell_value(from._internal_sell_value());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBItemData::CopyFrom(const PBItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItemData::IsInitialized() const {
  return true;
}

void PBItemData::InternalSwap(PBItemData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_path_, lhs_arena,
      &other->_impl_.image_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_name_, lhs_arena,
      &other->_impl_.item_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBItemData, _impl_.quantity_)
      + sizeof(PBItemData::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(PBItemData, _impl_.sell_value_)>(
          reinterpret_cast<char*>(&_impl_.sell_value_),
          reinterpret_cast<char*>(&other->_impl_.sell_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_item_2eproto_getter, &descriptor_table_item_2eproto_once,
      file_level_metadata_item_2eproto[0]);
}

// ===================================================================

class PBItemsDict::_Internal {
 public:
};

PBItemsDict::PBItemsDict(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBItemsDict)
}
PBItemsDict::PBItemsDict(const PBItemsDict& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBItemsDict* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.item_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_type_ = from._impl_.item_type_;
  // @@protoc_insertion_point(copy_constructor:PBItemsDict)
}

inline void PBItemsDict::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.item_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PBItemsDict::~PBItemsDict() {
  // @@protoc_insertion_point(destructor:PBItemsDict)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBItemsDict::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void PBItemsDict::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBItemsDict::Clear() {
// @@protoc_insertion_point(message_clear_start:PBItemsDict)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.item_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBItemsDict::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PBItemType item_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_type(static_cast<::PBItemType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .PBItemData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBItemsDict::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBItemsDict)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBItemType item_type = 1;
  if (this->_internal_item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_item_type(), target);
  }

  // repeated .PBItemData data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBItemsDict)
  return target;
}

size_t PBItemsDict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBItemsDict)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBItemData data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PBItemType item_type = 1;
  if (this->_internal_item_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_item_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBItemsDict::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBItemsDict::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBItemsDict::GetClassData() const { return &_class_data_; }


void PBItemsDict::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBItemsDict*>(&to_msg);
  auto& from = static_cast<const PBItemsDict&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBItemsDict)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_item_type() != 0) {
    _this->_internal_set_item_type(from._internal_item_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBItemsDict::CopyFrom(const PBItemsDict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBItemsDict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItemsDict::IsInitialized() const {
  return true;
}

void PBItemsDict::InternalSwap(PBItemsDict* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.item_type_, other->_impl_.item_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBItemsDict::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_item_2eproto_getter, &descriptor_table_item_2eproto_once,
      file_level_metadata_item_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBItemData*
Arena::CreateMaybeMessage< ::PBItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::PBItemsDict*
Arena::CreateMaybeMessage< ::PBItemsDict >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBItemsDict >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
