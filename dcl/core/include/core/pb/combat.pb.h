// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: combat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_combat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_combat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "player.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_combat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_combat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_combat_2eproto;
class PBCombat;
class PBCombatDefaultTypeInternal;
extern PBCombatDefaultTypeInternal _PBCombat_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBCombat* Arena::CreateMaybeMessage<::PBCombat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PBCombatActions : int {
  ATTACK = 0,
  DODGE = 1,
  BLOCK = 2,
  SURRENDER = 3,
  PBCombatActions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PBCombatActions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PBCombatActions_IsValid(int value);
constexpr PBCombatActions PBCombatActions_MIN = ATTACK;
constexpr PBCombatActions PBCombatActions_MAX = SURRENDER;
constexpr int PBCombatActions_ARRAYSIZE = PBCombatActions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBCombatActions_descriptor();
template<typename T>
inline const std::string& PBCombatActions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PBCombatActions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PBCombatActions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PBCombatActions_descriptor(), enum_t_value);
}
inline bool PBCombatActions_Parse(
    const std::string& name, PBCombatActions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PBCombatActions>(
    PBCombatActions_descriptor(), name, value);
}
// ===================================================================

class PBCombat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBCombat) */ {
 public:
  inline PBCombat() : PBCombat(nullptr) {};
  virtual ~PBCombat();

  PBCombat(const PBCombat& from);
  PBCombat(PBCombat&& from) noexcept
    : PBCombat() {
    *this = ::std::move(from);
  }

  inline PBCombat& operator=(const PBCombat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBCombat& operator=(PBCombat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBCombat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBCombat* internal_default_instance() {
    return reinterpret_cast<const PBCombat*>(
               &_PBCombat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBCombat& a, PBCombat& b) {
    a.Swap(&b);
  }
  inline void Swap(PBCombat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBCombat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBCombat* New() const final {
    return CreateMaybeMessage<PBCombat>(nullptr);
  }

  PBCombat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBCombat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBCombat& from);
  void MergeFrom(const PBCombat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBCombat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBCombat";
  }
  protected:
  explicit PBCombat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_combat_2eproto);
    return ::descriptor_table_combat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterUserInfoFieldNumber = 5,
    kOpponentUserInfoFieldNumber = 6,
    kStarterUserIdFieldNumber = 1,
    kOpponentUserIdFieldNumber = 2,
    kWagerFieldNumber = 3,
    kTurnFieldNumber = 4,
  };
  // .PBPlayer starter_user_info = 5;
  bool has_starter_user_info() const;
  private:
  bool _internal_has_starter_user_info() const;
  public:
  void clear_starter_user_info();
  const ::PBPlayer& starter_user_info() const;
  ::PBPlayer* release_starter_user_info();
  ::PBPlayer* mutable_starter_user_info();
  void set_allocated_starter_user_info(::PBPlayer* starter_user_info);
  private:
  const ::PBPlayer& _internal_starter_user_info() const;
  ::PBPlayer* _internal_mutable_starter_user_info();
  public:
  void unsafe_arena_set_allocated_starter_user_info(
      ::PBPlayer* starter_user_info);
  ::PBPlayer* unsafe_arena_release_starter_user_info();

  // .PBPlayer opponent_user_info = 6;
  bool has_opponent_user_info() const;
  private:
  bool _internal_has_opponent_user_info() const;
  public:
  void clear_opponent_user_info();
  const ::PBPlayer& opponent_user_info() const;
  ::PBPlayer* release_opponent_user_info();
  ::PBPlayer* mutable_opponent_user_info();
  void set_allocated_opponent_user_info(::PBPlayer* opponent_user_info);
  private:
  const ::PBPlayer& _internal_opponent_user_info() const;
  ::PBPlayer* _internal_mutable_opponent_user_info();
  public:
  void unsafe_arena_set_allocated_opponent_user_info(
      ::PBPlayer* opponent_user_info);
  ::PBPlayer* unsafe_arena_release_opponent_user_info();

  // int64 starter_user_id = 1;
  void clear_starter_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 starter_user_id() const;
  void set_starter_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starter_user_id() const;
  void _internal_set_starter_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 opponent_user_id = 2;
  void clear_opponent_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 opponent_user_id() const;
  void set_opponent_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_opponent_user_id() const;
  void _internal_set_opponent_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 wager = 3;
  void clear_wager();
  ::PROTOBUF_NAMESPACE_ID::int32 wager() const;
  void set_wager(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wager() const;
  void _internal_set_wager(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 turn = 4;
  void clear_turn();
  ::PROTOBUF_NAMESPACE_ID::int32 turn() const;
  void set_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_turn() const;
  void _internal_set_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBCombat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PBPlayer* starter_user_info_;
  ::PBPlayer* opponent_user_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 starter_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 opponent_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 wager_;
  ::PROTOBUF_NAMESPACE_ID::int32 turn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_combat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBCombat

// int64 starter_user_id = 1;
inline void PBCombat::clear_starter_user_id() {
  starter_user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PBCombat::_internal_starter_user_id() const {
  return starter_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PBCombat::starter_user_id() const {
  // @@protoc_insertion_point(field_get:PBCombat.starter_user_id)
  return _internal_starter_user_id();
}
inline void PBCombat::_internal_set_starter_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starter_user_id_ = value;
}
inline void PBCombat::set_starter_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starter_user_id(value);
  // @@protoc_insertion_point(field_set:PBCombat.starter_user_id)
}

// int64 opponent_user_id = 2;
inline void PBCombat::clear_opponent_user_id() {
  opponent_user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PBCombat::_internal_opponent_user_id() const {
  return opponent_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PBCombat::opponent_user_id() const {
  // @@protoc_insertion_point(field_get:PBCombat.opponent_user_id)
  return _internal_opponent_user_id();
}
inline void PBCombat::_internal_set_opponent_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  opponent_user_id_ = value;
}
inline void PBCombat::set_opponent_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_opponent_user_id(value);
  // @@protoc_insertion_point(field_set:PBCombat.opponent_user_id)
}

// int32 wager = 3;
inline void PBCombat::clear_wager() {
  wager_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBCombat::_internal_wager() const {
  return wager_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBCombat::wager() const {
  // @@protoc_insertion_point(field_get:PBCombat.wager)
  return _internal_wager();
}
inline void PBCombat::_internal_set_wager(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wager_ = value;
}
inline void PBCombat::set_wager(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wager(value);
  // @@protoc_insertion_point(field_set:PBCombat.wager)
}

// int32 turn = 4;
inline void PBCombat::clear_turn() {
  turn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBCombat::_internal_turn() const {
  return turn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBCombat::turn() const {
  // @@protoc_insertion_point(field_get:PBCombat.turn)
  return _internal_turn();
}
inline void PBCombat::_internal_set_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  turn_ = value;
}
inline void PBCombat::set_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:PBCombat.turn)
}

// .PBPlayer starter_user_info = 5;
inline bool PBCombat::_internal_has_starter_user_info() const {
  return this != internal_default_instance() && starter_user_info_ != nullptr;
}
inline bool PBCombat::has_starter_user_info() const {
  return _internal_has_starter_user_info();
}
inline const ::PBPlayer& PBCombat::_internal_starter_user_info() const {
  const ::PBPlayer* p = starter_user_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBPlayer*>(
      &::_PBPlayer_default_instance_);
}
inline const ::PBPlayer& PBCombat::starter_user_info() const {
  // @@protoc_insertion_point(field_get:PBCombat.starter_user_info)
  return _internal_starter_user_info();
}
inline void PBCombat::unsafe_arena_set_allocated_starter_user_info(
    ::PBPlayer* starter_user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starter_user_info_);
  }
  starter_user_info_ = starter_user_info;
  if (starter_user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBCombat.starter_user_info)
}
inline ::PBPlayer* PBCombat::release_starter_user_info() {
  auto temp = unsafe_arena_release_starter_user_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBPlayer* PBCombat::unsafe_arena_release_starter_user_info() {
  // @@protoc_insertion_point(field_release:PBCombat.starter_user_info)
  
  ::PBPlayer* temp = starter_user_info_;
  starter_user_info_ = nullptr;
  return temp;
}
inline ::PBPlayer* PBCombat::_internal_mutable_starter_user_info() {
  
  if (starter_user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBPlayer>(GetArena());
    starter_user_info_ = p;
  }
  return starter_user_info_;
}
inline ::PBPlayer* PBCombat::mutable_starter_user_info() {
  // @@protoc_insertion_point(field_mutable:PBCombat.starter_user_info)
  return _internal_mutable_starter_user_info();
}
inline void PBCombat::set_allocated_starter_user_info(::PBPlayer* starter_user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starter_user_info_);
  }
  if (starter_user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starter_user_info)->GetArena();
    if (message_arena != submessage_arena) {
      starter_user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starter_user_info, submessage_arena);
    }
    
  } else {
    
  }
  starter_user_info_ = starter_user_info;
  // @@protoc_insertion_point(field_set_allocated:PBCombat.starter_user_info)
}

// .PBPlayer opponent_user_info = 6;
inline bool PBCombat::_internal_has_opponent_user_info() const {
  return this != internal_default_instance() && opponent_user_info_ != nullptr;
}
inline bool PBCombat::has_opponent_user_info() const {
  return _internal_has_opponent_user_info();
}
inline const ::PBPlayer& PBCombat::_internal_opponent_user_info() const {
  const ::PBPlayer* p = opponent_user_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBPlayer*>(
      &::_PBPlayer_default_instance_);
}
inline const ::PBPlayer& PBCombat::opponent_user_info() const {
  // @@protoc_insertion_point(field_get:PBCombat.opponent_user_info)
  return _internal_opponent_user_info();
}
inline void PBCombat::unsafe_arena_set_allocated_opponent_user_info(
    ::PBPlayer* opponent_user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opponent_user_info_);
  }
  opponent_user_info_ = opponent_user_info;
  if (opponent_user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBCombat.opponent_user_info)
}
inline ::PBPlayer* PBCombat::release_opponent_user_info() {
  auto temp = unsafe_arena_release_opponent_user_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PBPlayer* PBCombat::unsafe_arena_release_opponent_user_info() {
  // @@protoc_insertion_point(field_release:PBCombat.opponent_user_info)
  
  ::PBPlayer* temp = opponent_user_info_;
  opponent_user_info_ = nullptr;
  return temp;
}
inline ::PBPlayer* PBCombat::_internal_mutable_opponent_user_info() {
  
  if (opponent_user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBPlayer>(GetArena());
    opponent_user_info_ = p;
  }
  return opponent_user_info_;
}
inline ::PBPlayer* PBCombat::mutable_opponent_user_info() {
  // @@protoc_insertion_point(field_mutable:PBCombat.opponent_user_info)
  return _internal_mutable_opponent_user_info();
}
inline void PBCombat::set_allocated_opponent_user_info(::PBPlayer* opponent_user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(opponent_user_info_);
  }
  if (opponent_user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opponent_user_info)->GetArena();
    if (message_arena != submessage_arena) {
      opponent_user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opponent_user_info, submessage_arena);
    }
    
  } else {
    
  }
  opponent_user_info_ = opponent_user_info;
  // @@protoc_insertion_point(field_set_allocated:PBCombat.opponent_user_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PBCombatActions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBCombatActions>() {
  return ::PBCombatActions_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_combat_2eproto
