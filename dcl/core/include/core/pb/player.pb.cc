// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_player_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBEquipation_player_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_player_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PBPlayer_player_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_player_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBSkills_player_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_player_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBStats_player_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class PBEquipationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBEquipation> _instance;
} _PBEquipation_default_instance_;
class PBStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBStats> _instance;
} _PBStats_default_instance_;
class PBSkillsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBSkills> _instance;
} _PBSkills_default_instance_;
class PBPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBPlayer> _instance;
} _PBPlayer_default_instance_;
class PBUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PBUser> _instance;
} _PBUser_default_instance_;
static void InitDefaultsscc_info_PBEquipation_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBEquipation_default_instance_;
    new (ptr) ::PBEquipation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBEquipation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBEquipation_player_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PBEquipation_player_2eproto}, {}};

static void InitDefaultsscc_info_PBPlayer_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBPlayer_default_instance_;
    new (ptr) ::PBPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PBPlayer_player_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PBPlayer_player_2eproto}, {
      &scc_info_PBStats_player_2eproto.base,
      &scc_info_PBSkills_player_2eproto.base,
      &scc_info_PBEquipation_player_2eproto.base,}};

static void InitDefaultsscc_info_PBSkills_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBSkills_default_instance_;
    new (ptr) ::PBSkills();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBSkills::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBSkills_player_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PBSkills_player_2eproto}, {}};

static void InitDefaultsscc_info_PBStats_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBStats_default_instance_;
    new (ptr) ::PBStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PBStats_player_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PBStats_player_2eproto}, {}};

static void InitDefaultsscc_info_PBUser_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBUser_default_instance_;
    new (ptr) ::PBUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PBUser_player_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PBUser_player_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_PBPlayer_player_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_player_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_player_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_player_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_player_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBEquipation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBEquipation, armor_head_),
  PROTOBUF_FIELD_OFFSET(::PBEquipation, armor_chest_),
  PROTOBUF_FIELD_OFFSET(::PBEquipation, armor_leggings_),
  PROTOBUF_FIELD_OFFSET(::PBEquipation, armor_boots_),
  PROTOBUF_FIELD_OFFSET(::PBEquipation, weapon_),
  PROTOBUF_FIELD_OFFSET(::PBEquipation, tool_),
  PROTOBUF_FIELD_OFFSET(::PBEquipation, attacks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBStats, max_health_),
  PROTOBUF_FIELD_OFFSET(::PBStats, current_health_),
  PROTOBUF_FIELD_OFFSET(::PBStats, strength_),
  PROTOBUF_FIELD_OFFSET(::PBStats, defense_),
  PROTOBUF_FIELD_OFFSET(::PBStats, precision_),
  PROTOBUF_FIELD_OFFSET(::PBStats, speed_),
  PROTOBUF_FIELD_OFFSET(::PBStats, luck_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBSkills, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBSkills, foraging_lvl_),
  PROTOBUF_FIELD_OFFSET(::PBSkills, foraging_xp_),
  PROTOBUF_FIELD_OFFSET(::PBSkills, mining_lvl_),
  PROTOBUF_FIELD_OFFSET(::PBSkills, mining_xp_),
  PROTOBUF_FIELD_OFFSET(::PBSkills, combat_lvl_),
  PROTOBUF_FIELD_OFFSET(::PBSkills, combat_xp_),
  PROTOBUF_FIELD_OFFSET(::PBSkills, athletics_lvl_),
  PROTOBUF_FIELD_OFFSET(::PBSkills, athletics_xp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBPlayer, guild_id_),
  PROTOBUF_FIELD_OFFSET(::PBPlayer, current_location_),
  PROTOBUF_FIELD_OFFSET(::PBPlayer, stats_),
  PROTOBUF_FIELD_OFFSET(::PBPlayer, skills_),
  PROTOBUF_FIELD_OFFSET(::PBPlayer, equipation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBUser, discord_id_),
  PROTOBUF_FIELD_OFFSET(::PBUser, user_name_),
  PROTOBUF_FIELD_OFFSET(::PBUser, current_player_id_),
  PROTOBUF_FIELD_OFFSET(::PBUser, last_online_),
  PROTOBUF_FIELD_OFFSET(::PBUser, players_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PBEquipation)},
  { 12, -1, sizeof(::PBStats)},
  { 24, -1, sizeof(::PBSkills)},
  { 37, -1, sizeof(::PBPlayer)},
  { 47, -1, sizeof(::PBUser)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBEquipation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBSkills_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBUser_default_instance_),
};

const char descriptor_table_protodef_player_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014player.proto\032\037google/protobuf/timestam"
  "p.proto\032\nitem.proto\032\016location.proto\"\356\001\n\014"
  "PBEquipation\022\037\n\narmor_head\030\001 \001(\0162\013.PBIte"
  "mEnum\022 \n\013armor_chest\030\002 \001(\0162\013.PBItemEnum\022"
  "#\n\016armor_leggings\030\003 \001(\0162\013.PBItemEnum\022 \n\013"
  "armor_boots\030\004 \001(\0162\013.PBItemEnum\022\033\n\006weapon"
  "\030\005 \001(\0162\013.PBItemEnum\022\031\n\004tool\030\006 \001(\0162\013.PBIt"
  "emEnum\022\034\n\007attacks\030\007 \003(\0162\013.PBItemEnum\"\210\001\n"
  "\007PBStats\022\022\n\nmax_health\030\001 \001(\005\022\026\n\016current_"
  "health\030\002 \001(\005\022\020\n\010strength\030\003 \001(\005\022\017\n\007defens"
  "e\030\004 \001(\005\022\021\n\tprecision\030\005 \001(\005\022\r\n\005speed\030\006 \001("
  "\005\022\014\n\004luck\030\007 \001(\005\"\260\001\n\010PBSkills\022\024\n\014foraging"
  "_lvl\030\001 \001(\005\022\023\n\013foraging_xp\030\002 \001(\003\022\022\n\nminin"
  "g_lvl\030\003 \001(\005\022\021\n\tmining_xp\030\004 \001(\003\022\022\n\ncombat"
  "_lvl\030\005 \001(\005\022\021\n\tcombat_xp\030\006 \001(\003\022\025\n\rathleti"
  "cs_lvl\030\007 \001(\005\022\024\n\014athletics_xp\030\010 \001(\003\"\234\001\n\010P"
  "BPlayer\022\020\n\010guild_id\030\001 \001(\004\022\'\n\020current_loc"
  "ation\030\002 \001(\0162\r.PBLocationID\022\027\n\005stats\030\003 \001("
  "\0132\010.PBStats\022\031\n\006skills\030\004 \001(\0132\t.PBSkills\022!"
  "\n\nequipation\030\005 \001(\0132\r.PBEquipation\"\227\001\n\006PB"
  "User\022\022\n\ndiscord_id\030\001 \001(\004\022\021\n\tuser_name\030\002 "
  "\001(\t\022\031\n\021current_player_id\030\003 \001(\005\022/\n\013last_o"
  "nline\030\004 \001(\0132\032.google.protobuf.Timestamp\022"
  "\032\n\007players\030\005 \003(\0132\t.PBPlayer*Z\n\rPBPlayerS"
  "tats\022\n\n\006HEALTH\020\000\022\014\n\010STRENGTH\020\001\022\013\n\007DEFENS"
  "E\020\002\022\r\n\tPRECISION\020\003\022\t\n\005SPEED\020\004\022\010\n\004LUCK\020\005*"
  "C\n\016PBPlayerSkills\022\n\n\006FORAGE\020\000\022\n\n\006MINING\020"
  "\001\022\n\n\006COMBAT\020\002\022\r\n\tATHLETICS\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_player_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_item_2eproto,
  &::descriptor_table_location_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_player_2eproto_sccs[5] = {
  &scc_info_PBEquipation_player_2eproto.base,
  &scc_info_PBPlayer_player_2eproto.base,
  &scc_info_PBSkills_player_2eproto.base,
  &scc_info_PBStats_player_2eproto.base,
  &scc_info_PBUser_player_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_player_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_2eproto = {
  false, false, descriptor_table_protodef_player_2eproto, "player.proto", 1116,
  &descriptor_table_player_2eproto_once, descriptor_table_player_2eproto_sccs, descriptor_table_player_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_player_2eproto::offsets,
  file_level_metadata_player_2eproto, 5, file_level_enum_descriptors_player_2eproto, file_level_service_descriptors_player_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_player_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_player_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBPlayerStats_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_player_2eproto);
  return file_level_enum_descriptors_player_2eproto[0];
}
bool PBPlayerStats_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBPlayerSkills_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_player_2eproto);
  return file_level_enum_descriptors_player_2eproto[1];
}
bool PBPlayerSkills_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PBEquipation::InitAsDefaultInstance() {
}
class PBEquipation::_Internal {
 public:
};

PBEquipation::PBEquipation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attacks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBEquipation)
}
PBEquipation::PBEquipation(const PBEquipation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attacks_(from.attacks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&armor_head_, &from.armor_head_,
    static_cast<size_t>(reinterpret_cast<char*>(&tool_) -
    reinterpret_cast<char*>(&armor_head_)) + sizeof(tool_));
  // @@protoc_insertion_point(copy_constructor:PBEquipation)
}

void PBEquipation::SharedCtor() {
  ::memset(&armor_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tool_) -
      reinterpret_cast<char*>(&armor_head_)) + sizeof(tool_));
}

PBEquipation::~PBEquipation() {
  // @@protoc_insertion_point(destructor:PBEquipation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBEquipation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PBEquipation::ArenaDtor(void* object) {
  PBEquipation* _this = reinterpret_cast< PBEquipation* >(object);
  (void)_this;
}
void PBEquipation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBEquipation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBEquipation& PBEquipation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBEquipation_player_2eproto.base);
  return *internal_default_instance();
}


void PBEquipation::Clear() {
// @@protoc_insertion_point(message_clear_start:PBEquipation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attacks_.Clear();
  ::memset(&armor_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tool_) -
      reinterpret_cast<char*>(&armor_head_)) + sizeof(tool_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBEquipation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PBItemEnum armor_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_armor_head(static_cast<::PBItemEnum>(val));
        } else goto handle_unusual;
        continue;
      // .PBItemEnum armor_chest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_armor_chest(static_cast<::PBItemEnum>(val));
        } else goto handle_unusual;
        continue;
      // .PBItemEnum armor_leggings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_armor_leggings(static_cast<::PBItemEnum>(val));
        } else goto handle_unusual;
        continue;
      // .PBItemEnum armor_boots = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_armor_boots(static_cast<::PBItemEnum>(val));
        } else goto handle_unusual;
        continue;
      // .PBItemEnum weapon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_weapon(static_cast<::PBItemEnum>(val));
        } else goto handle_unusual;
        continue;
      // .PBItemEnum tool = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tool(static_cast<::PBItemEnum>(val));
        } else goto handle_unusual;
        continue;
      // repeated .PBItemEnum attacks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_attacks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_attacks(static_cast<::PBItemEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBEquipation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBEquipation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBItemEnum armor_head = 1;
  if (this->armor_head() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_armor_head(), target);
  }

  // .PBItemEnum armor_chest = 2;
  if (this->armor_chest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_armor_chest(), target);
  }

  // .PBItemEnum armor_leggings = 3;
  if (this->armor_leggings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_armor_leggings(), target);
  }

  // .PBItemEnum armor_boots = 4;
  if (this->armor_boots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_armor_boots(), target);
  }

  // .PBItemEnum weapon = 5;
  if (this->weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_weapon(), target);
  }

  // .PBItemEnum tool = 6;
  if (this->tool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_tool(), target);
  }

  // repeated .PBItemEnum attacks = 7;
  {
    int byte_size = _attacks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, attacks_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBEquipation)
  return target;
}

size_t PBEquipation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBEquipation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBItemEnum attacks = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_attacks_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_attacks(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _attacks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .PBItemEnum armor_head = 1;
  if (this->armor_head() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_armor_head());
  }

  // .PBItemEnum armor_chest = 2;
  if (this->armor_chest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_armor_chest());
  }

  // .PBItemEnum armor_leggings = 3;
  if (this->armor_leggings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_armor_leggings());
  }

  // .PBItemEnum armor_boots = 4;
  if (this->armor_boots() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_armor_boots());
  }

  // .PBItemEnum weapon = 5;
  if (this->weapon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_weapon());
  }

  // .PBItemEnum tool = 6;
  if (this->tool() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tool());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBEquipation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBEquipation)
  GOOGLE_DCHECK_NE(&from, this);
  const PBEquipation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBEquipation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBEquipation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBEquipation)
    MergeFrom(*source);
  }
}

void PBEquipation::MergeFrom(const PBEquipation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBEquipation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attacks_.MergeFrom(from.attacks_);
  if (from.armor_head() != 0) {
    _internal_set_armor_head(from._internal_armor_head());
  }
  if (from.armor_chest() != 0) {
    _internal_set_armor_chest(from._internal_armor_chest());
  }
  if (from.armor_leggings() != 0) {
    _internal_set_armor_leggings(from._internal_armor_leggings());
  }
  if (from.armor_boots() != 0) {
    _internal_set_armor_boots(from._internal_armor_boots());
  }
  if (from.weapon() != 0) {
    _internal_set_weapon(from._internal_weapon());
  }
  if (from.tool() != 0) {
    _internal_set_tool(from._internal_tool());
  }
}

void PBEquipation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBEquipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipation::CopyFrom(const PBEquipation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBEquipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEquipation::IsInitialized() const {
  return true;
}

void PBEquipation::InternalSwap(PBEquipation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attacks_.InternalSwap(&other->attacks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBEquipation, tool_)
      + sizeof(PBEquipation::tool_)
      - PROTOBUF_FIELD_OFFSET(PBEquipation, armor_head_)>(
          reinterpret_cast<char*>(&armor_head_),
          reinterpret_cast<char*>(&other->armor_head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBEquipation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBStats::InitAsDefaultInstance() {
}
class PBStats::_Internal {
 public:
};

PBStats::PBStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBStats)
}
PBStats::PBStats(const PBStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_health_, &from.max_health_,
    static_cast<size_t>(reinterpret_cast<char*>(&luck_) -
    reinterpret_cast<char*>(&max_health_)) + sizeof(luck_));
  // @@protoc_insertion_point(copy_constructor:PBStats)
}

void PBStats::SharedCtor() {
  ::memset(&max_health_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&luck_) -
      reinterpret_cast<char*>(&max_health_)) + sizeof(luck_));
}

PBStats::~PBStats() {
  // @@protoc_insertion_point(destructor:PBStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PBStats::ArenaDtor(void* object) {
  PBStats* _this = reinterpret_cast< PBStats* >(object);
  (void)_this;
}
void PBStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBStats& PBStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBStats_player_2eproto.base);
  return *internal_default_instance();
}


void PBStats::Clear() {
// @@protoc_insertion_point(message_clear_start:PBStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_health_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&luck_) -
      reinterpret_cast<char*>(&max_health_)) + sizeof(luck_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_health = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_health = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 defense = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          defense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 precision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 luck = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          luck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_health = 1;
  if (this->max_health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_health(), target);
  }

  // int32 current_health = 2;
  if (this->current_health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_health(), target);
  }

  // int32 strength = 3;
  if (this->strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_strength(), target);
  }

  // int32 defense = 4;
  if (this->defense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_defense(), target);
  }

  // int32 precision = 5;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_precision(), target);
  }

  // int32 speed = 6;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_speed(), target);
  }

  // int32 luck = 7;
  if (this->luck() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_luck(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBStats)
  return target;
}

size_t PBStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_health = 1;
  if (this->max_health() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_health());
  }

  // int32 current_health = 2;
  if (this->current_health() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_health());
  }

  // int32 strength = 3;
  if (this->strength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strength());
  }

  // int32 defense = 4;
  if (this->defense() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_defense());
  }

  // int32 precision = 5;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_precision());
  }

  // int32 speed = 6;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed());
  }

  // int32 luck = 7;
  if (this->luck() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_luck());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBStats)
  GOOGLE_DCHECK_NE(&from, this);
  const PBStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBStats)
    MergeFrom(*source);
  }
}

void PBStats::MergeFrom(const PBStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_health() != 0) {
    _internal_set_max_health(from._internal_max_health());
  }
  if (from.current_health() != 0) {
    _internal_set_current_health(from._internal_current_health());
  }
  if (from.strength() != 0) {
    _internal_set_strength(from._internal_strength());
  }
  if (from.defense() != 0) {
    _internal_set_defense(from._internal_defense());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.luck() != 0) {
    _internal_set_luck(from._internal_luck());
  }
}

void PBStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStats::CopyFrom(const PBStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStats::IsInitialized() const {
  return true;
}

void PBStats::InternalSwap(PBStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBStats, luck_)
      + sizeof(PBStats::luck_)
      - PROTOBUF_FIELD_OFFSET(PBStats, max_health_)>(
          reinterpret_cast<char*>(&max_health_),
          reinterpret_cast<char*>(&other->max_health_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBSkills::InitAsDefaultInstance() {
}
class PBSkills::_Internal {
 public:
};

PBSkills::PBSkills(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBSkills)
}
PBSkills::PBSkills(const PBSkills& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&foraging_xp_, &from.foraging_xp_,
    static_cast<size_t>(reinterpret_cast<char*>(&athletics_xp_) -
    reinterpret_cast<char*>(&foraging_xp_)) + sizeof(athletics_xp_));
  // @@protoc_insertion_point(copy_constructor:PBSkills)
}

void PBSkills::SharedCtor() {
  ::memset(&foraging_xp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&athletics_xp_) -
      reinterpret_cast<char*>(&foraging_xp_)) + sizeof(athletics_xp_));
}

PBSkills::~PBSkills() {
  // @@protoc_insertion_point(destructor:PBSkills)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBSkills::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PBSkills::ArenaDtor(void* object) {
  PBSkills* _this = reinterpret_cast< PBSkills* >(object);
  (void)_this;
}
void PBSkills::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBSkills::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBSkills& PBSkills::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBSkills_player_2eproto.base);
  return *internal_default_instance();
}


void PBSkills::Clear() {
// @@protoc_insertion_point(message_clear_start:PBSkills)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&foraging_xp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&athletics_xp_) -
      reinterpret_cast<char*>(&foraging_xp_)) + sizeof(athletics_xp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBSkills::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 foraging_lvl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          foraging_lvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 foraging_xp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          foraging_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mining_lvl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mining_lvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mining_xp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mining_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 combat_lvl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          combat_lvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 combat_xp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          combat_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 athletics_lvl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          athletics_lvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 athletics_xp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          athletics_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBSkills::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBSkills)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 foraging_lvl = 1;
  if (this->foraging_lvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_foraging_lvl(), target);
  }

  // int64 foraging_xp = 2;
  if (this->foraging_xp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_foraging_xp(), target);
  }

  // int32 mining_lvl = 3;
  if (this->mining_lvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mining_lvl(), target);
  }

  // int64 mining_xp = 4;
  if (this->mining_xp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_mining_xp(), target);
  }

  // int32 combat_lvl = 5;
  if (this->combat_lvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_combat_lvl(), target);
  }

  // int64 combat_xp = 6;
  if (this->combat_xp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_combat_xp(), target);
  }

  // int32 athletics_lvl = 7;
  if (this->athletics_lvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_athletics_lvl(), target);
  }

  // int64 athletics_xp = 8;
  if (this->athletics_xp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_athletics_xp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBSkills)
  return target;
}

size_t PBSkills::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBSkills)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 foraging_xp = 2;
  if (this->foraging_xp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_foraging_xp());
  }

  // int32 foraging_lvl = 1;
  if (this->foraging_lvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_foraging_lvl());
  }

  // int32 mining_lvl = 3;
  if (this->mining_lvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mining_lvl());
  }

  // int64 mining_xp = 4;
  if (this->mining_xp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mining_xp());
  }

  // int64 combat_xp = 6;
  if (this->combat_xp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_combat_xp());
  }

  // int32 combat_lvl = 5;
  if (this->combat_lvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_combat_lvl());
  }

  // int32 athletics_lvl = 7;
  if (this->athletics_lvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_athletics_lvl());
  }

  // int64 athletics_xp = 8;
  if (this->athletics_xp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_athletics_xp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBSkills::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBSkills)
  GOOGLE_DCHECK_NE(&from, this);
  const PBSkills* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBSkills>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBSkills)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBSkills)
    MergeFrom(*source);
  }
}

void PBSkills::MergeFrom(const PBSkills& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBSkills)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.foraging_xp() != 0) {
    _internal_set_foraging_xp(from._internal_foraging_xp());
  }
  if (from.foraging_lvl() != 0) {
    _internal_set_foraging_lvl(from._internal_foraging_lvl());
  }
  if (from.mining_lvl() != 0) {
    _internal_set_mining_lvl(from._internal_mining_lvl());
  }
  if (from.mining_xp() != 0) {
    _internal_set_mining_xp(from._internal_mining_xp());
  }
  if (from.combat_xp() != 0) {
    _internal_set_combat_xp(from._internal_combat_xp());
  }
  if (from.combat_lvl() != 0) {
    _internal_set_combat_lvl(from._internal_combat_lvl());
  }
  if (from.athletics_lvl() != 0) {
    _internal_set_athletics_lvl(from._internal_athletics_lvl());
  }
  if (from.athletics_xp() != 0) {
    _internal_set_athletics_xp(from._internal_athletics_xp());
  }
}

void PBSkills::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBSkills)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkills::CopyFrom(const PBSkills& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBSkills)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSkills::IsInitialized() const {
  return true;
}

void PBSkills::InternalSwap(PBSkills* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBSkills, athletics_xp_)
      + sizeof(PBSkills::athletics_xp_)
      - PROTOBUF_FIELD_OFFSET(PBSkills, foraging_xp_)>(
          reinterpret_cast<char*>(&foraging_xp_),
          reinterpret_cast<char*>(&other->foraging_xp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBSkills::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBPlayer::InitAsDefaultInstance() {
  ::_PBPlayer_default_instance_._instance.get_mutable()->stats_ = const_cast< ::PBStats*>(
      ::PBStats::internal_default_instance());
  ::_PBPlayer_default_instance_._instance.get_mutable()->skills_ = const_cast< ::PBSkills*>(
      ::PBSkills::internal_default_instance());
  ::_PBPlayer_default_instance_._instance.get_mutable()->equipation_ = const_cast< ::PBEquipation*>(
      ::PBEquipation::internal_default_instance());
}
class PBPlayer::_Internal {
 public:
  static const ::PBStats& stats(const PBPlayer* msg);
  static const ::PBSkills& skills(const PBPlayer* msg);
  static const ::PBEquipation& equipation(const PBPlayer* msg);
};

const ::PBStats&
PBPlayer::_Internal::stats(const PBPlayer* msg) {
  return *msg->stats_;
}
const ::PBSkills&
PBPlayer::_Internal::skills(const PBPlayer* msg) {
  return *msg->skills_;
}
const ::PBEquipation&
PBPlayer::_Internal::equipation(const PBPlayer* msg) {
  return *msg->equipation_;
}
PBPlayer::PBPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBPlayer)
}
PBPlayer::PBPlayer(const PBPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::PBStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  if (from._internal_has_skills()) {
    skills_ = new ::PBSkills(*from.skills_);
  } else {
    skills_ = nullptr;
  }
  if (from._internal_has_equipation()) {
    equipation_ = new ::PBEquipation(*from.equipation_);
  } else {
    equipation_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_location_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(current_location_));
  // @@protoc_insertion_point(copy_constructor:PBPlayer)
}

void PBPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBPlayer_player_2eproto.base);
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_location_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(current_location_));
}

PBPlayer::~PBPlayer() {
  // @@protoc_insertion_point(destructor:PBPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete skills_;
  if (this != internal_default_instance()) delete equipation_;
}

void PBPlayer::ArenaDtor(void* object) {
  PBPlayer* _this = reinterpret_cast< PBPlayer* >(object);
  (void)_this;
}
void PBPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBPlayer& PBPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBPlayer_player_2eproto.base);
  return *internal_default_instance();
}


void PBPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:PBPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  if (GetArena() == nullptr && skills_ != nullptr) {
    delete skills_;
  }
  skills_ = nullptr;
  if (GetArena() == nullptr && equipation_ != nullptr) {
    delete equipation_;
  }
  equipation_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_location_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(current_location_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBLocationID current_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_current_location(static_cast<::PBLocationID>(val));
        } else goto handle_unusual;
        continue;
      // .PBStats stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBSkills skills = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_skills(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PBEquipation equipation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // .PBLocationID current_location = 2;
  if (this->current_location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_current_location(), target);
  }

  // .PBStats stats = 3;
  if (this->has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stats(this), target, stream);
  }

  // .PBSkills skills = 4;
  if (this->has_skills()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::skills(this), target, stream);
  }

  // .PBEquipation equipation = 5;
  if (this->has_equipation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::equipation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBPlayer)
  return target;
}

size_t PBPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBStats stats = 3;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // .PBSkills skills = 4;
  if (this->has_skills()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skills_);
  }

  // .PBEquipation equipation = 5;
  if (this->has_equipation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *equipation_);
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // .PBLocationID current_location = 2;
  if (this->current_location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_current_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const PBPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBPlayer)
    MergeFrom(*source);
  }
}

void PBPlayer::MergeFrom(const PBPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stats()) {
    _internal_mutable_stats()->::PBStats::MergeFrom(from._internal_stats());
  }
  if (from.has_skills()) {
    _internal_mutable_skills()->::PBSkills::MergeFrom(from._internal_skills());
  }
  if (from.has_equipation()) {
    _internal_mutable_equipation()->::PBEquipation::MergeFrom(from._internal_equipation());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.current_location() != 0) {
    _internal_set_current_location(from._internal_current_location());
  }
}

void PBPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayer::CopyFrom(const PBPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayer::IsInitialized() const {
  return true;
}

void PBPlayer::InternalSwap(PBPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBPlayer, current_location_)
      + sizeof(PBPlayer::current_location_)
      - PROTOBUF_FIELD_OFFSET(PBPlayer, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PBUser::InitAsDefaultInstance() {
  ::_PBUser_default_instance_._instance.get_mutable()->last_online_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PBUser::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_online(const PBUser* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PBUser::_Internal::last_online(const PBUser* msg) {
  return *msg->last_online_;
}
void PBUser::clear_last_online() {
  if (GetArena() == nullptr && last_online_ != nullptr) {
    delete last_online_;
  }
  last_online_ = nullptr;
}
PBUser::PBUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PBUser)
}
PBUser::PBUser(const PBUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  if (from._internal_has_last_online()) {
    last_online_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_online_);
  } else {
    last_online_ = nullptr;
  }
  ::memcpy(&discord_id_, &from.discord_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_player_id_) -
    reinterpret_cast<char*>(&discord_id_)) + sizeof(current_player_id_));
  // @@protoc_insertion_point(copy_constructor:PBUser)
}

void PBUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PBUser_player_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_player_id_) -
      reinterpret_cast<char*>(&last_online_)) + sizeof(current_player_id_));
}

PBUser::~PBUser() {
  // @@protoc_insertion_point(destructor:PBUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PBUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_online_;
}

void PBUser::ArenaDtor(void* object) {
  PBUser* _this = reinterpret_cast< PBUser* >(object);
  (void)_this;
}
void PBUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBUser& PBUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PBUser_player_2eproto.base);
  return *internal_default_instance();
}


void PBUser::Clear() {
// @@protoc_insertion_point(message_clear_start:PBUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && last_online_ != nullptr) {
    delete last_online_;
  }
  last_online_ = nullptr;
  ::memset(&discord_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_player_id_) -
      reinterpret_cast<char*>(&discord_id_)) + sizeof(current_player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 discord_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          discord_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBUser.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_online(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PBPlayer players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 discord_id = 1;
  if (this->discord_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_discord_id(), target);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBUser.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // int32 current_player_id = 3;
  if (this->current_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_player_id(), target);
  }

  // .google.protobuf.Timestamp last_online = 4;
  if (this->has_last_online()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::last_online(this), target, stream);
  }

  // repeated .PBPlayer players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBUser)
  return target;
}

size_t PBUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBPlayer players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // .google.protobuf.Timestamp last_online = 4;
  if (this->has_last_online()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_online_);
  }

  // uint64 discord_id = 1;
  if (this->discord_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_discord_id());
  }

  // int32 current_player_id = 3;
  if (this->current_player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PBUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PBUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBUser)
    MergeFrom(*source);
  }
}

void PBUser::MergeFrom(const PBUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.user_name().size() > 0) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.has_last_online()) {
    _internal_mutable_last_online()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_online());
  }
  if (from.discord_id() != 0) {
    _internal_set_discord_id(from._internal_discord_id());
  }
  if (from.current_player_id() != 0) {
    _internal_set_current_player_id(from._internal_current_player_id());
  }
}

void PBUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUser::CopyFrom(const PBUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUser::IsInitialized() const {
  return true;
}

void PBUser::InternalSwap(PBUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBUser, current_player_id_)
      + sizeof(PBUser::current_player_id_)
      - PROTOBUF_FIELD_OFFSET(PBUser, last_online_)>(
          reinterpret_cast<char*>(&last_online_),
          reinterpret_cast<char*>(&other->last_online_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBUser::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBEquipation* Arena::CreateMaybeMessage< ::PBEquipation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBEquipation >(arena);
}
template<> PROTOBUF_NOINLINE ::PBStats* Arena::CreateMaybeMessage< ::PBStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBStats >(arena);
}
template<> PROTOBUF_NOINLINE ::PBSkills* Arena::CreateMaybeMessage< ::PBSkills >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBSkills >(arena);
}
template<> PROTOBUF_NOINLINE ::PBPlayer* Arena::CreateMaybeMessage< ::PBPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::PBUser* Arena::CreateMaybeMessage< ::PBUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBUser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
