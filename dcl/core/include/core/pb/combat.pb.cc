// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: combat.proto

#include "combat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PBCombat::PBCombat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.starter_user_info_)*/nullptr
  , /*decltype(_impl_.opponent_user_info_)*/nullptr
  , /*decltype(_impl_.starter_user_id_)*/int64_t{0}
  , /*decltype(_impl_.opponent_user_id_)*/int64_t{0}
  , /*decltype(_impl_.wager_)*/0
  , /*decltype(_impl_.turn_)*/0
  , /*decltype(_impl_.starter_action_)*/0
  , /*decltype(_impl_.opponent_action_)*/0
  , /*decltype(_impl_.starter_player_id_)*/0
  , /*decltype(_impl_.opponent_player_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PBCombatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBCombatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBCombatDefaultTypeInternal() {}
  union {
    PBCombat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBCombatDefaultTypeInternal _PBCombat_default_instance_;
static ::_pb::Metadata file_level_metadata_combat_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_combat_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_combat_2eproto = nullptr;

const uint32_t TableStruct_combat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBCombat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.starter_user_id_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.opponent_user_id_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.wager_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.turn_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.starter_action_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.opponent_action_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.starter_player_id_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.opponent_player_id_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.starter_user_info_),
  PROTOBUF_FIELD_OFFSET(::PBCombat, _impl_.opponent_user_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PBCombat)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PBCombat_default_instance_._instance,
};

const char descriptor_table_protodef_combat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014combat.proto\032\014player.proto\"\263\002\n\010PBComba"
  "t\022\027\n\017starter_user_id\030\001 \001(\003\022\030\n\020opponent_u"
  "ser_id\030\002 \001(\003\022\r\n\005wager\030\003 \001(\005\022\014\n\004turn\030\004 \001("
  "\005\022(\n\016starter_action\030\005 \001(\0162\020.PBCombatActi"
  "ons\022)\n\017opponent_action\030\006 \001(\0162\020.PBCombatA"
  "ctions\022\031\n\021starter_player_id\030\007 \001(\005\022\032\n\022opp"
  "onent_player_id\030\010 \001(\005\022$\n\021starter_user_in"
  "fo\030\t \001(\0132\t.PBPlayer\022%\n\022opponent_user_inf"
  "o\030\n \001(\0132\t.PBPlayer*[\n\017PBCombatActions\022\013\n"
  "\007CA_NONE\020\000\022\r\n\tCA_ATTACK\020\001\022\014\n\010CA_DODGE\020\002\022"
  "\014\n\010CA_BLOCK\020\003\022\020\n\014CA_SURRENDER\020\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_combat_2eproto_deps[1] = {
  &::descriptor_table_player_2eproto,
};
static ::_pbi::once_flag descriptor_table_combat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_combat_2eproto = {
    false, false, 439, descriptor_table_protodef_combat_2eproto,
    "combat.proto",
    &descriptor_table_combat_2eproto_once, descriptor_table_combat_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_combat_2eproto::offsets,
    file_level_metadata_combat_2eproto, file_level_enum_descriptors_combat_2eproto,
    file_level_service_descriptors_combat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_combat_2eproto_getter() {
  return &descriptor_table_combat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_combat_2eproto(&descriptor_table_combat_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBCombatActions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_combat_2eproto);
  return file_level_enum_descriptors_combat_2eproto[0];
}
bool PBCombatActions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PBCombat::_Internal {
 public:
  static const ::PBPlayer& starter_user_info(const PBCombat* msg);
  static const ::PBPlayer& opponent_user_info(const PBCombat* msg);
};

const ::PBPlayer&
PBCombat::_Internal::starter_user_info(const PBCombat* msg) {
  return *msg->_impl_.starter_user_info_;
}
const ::PBPlayer&
PBCombat::_Internal::opponent_user_info(const PBCombat* msg) {
  return *msg->_impl_.opponent_user_info_;
}
void PBCombat::clear_starter_user_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.starter_user_info_ != nullptr) {
    delete _impl_.starter_user_info_;
  }
  _impl_.starter_user_info_ = nullptr;
}
void PBCombat::clear_opponent_user_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.opponent_user_info_ != nullptr) {
    delete _impl_.opponent_user_info_;
  }
  _impl_.opponent_user_info_ = nullptr;
}
PBCombat::PBCombat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBCombat)
}
PBCombat::PBCombat(const PBCombat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBCombat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.starter_user_info_){nullptr}
    , decltype(_impl_.opponent_user_info_){nullptr}
    , decltype(_impl_.starter_user_id_){}
    , decltype(_impl_.opponent_user_id_){}
    , decltype(_impl_.wager_){}
    , decltype(_impl_.turn_){}
    , decltype(_impl_.starter_action_){}
    , decltype(_impl_.opponent_action_){}
    , decltype(_impl_.starter_player_id_){}
    , decltype(_impl_.opponent_player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_starter_user_info()) {
    _this->_impl_.starter_user_info_ = new ::PBPlayer(*from._impl_.starter_user_info_);
  }
  if (from._internal_has_opponent_user_info()) {
    _this->_impl_.opponent_user_info_ = new ::PBPlayer(*from._impl_.opponent_user_info_);
  }
  ::memcpy(&_impl_.starter_user_id_, &from._impl_.starter_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opponent_player_id_) -
    reinterpret_cast<char*>(&_impl_.starter_user_id_)) + sizeof(_impl_.opponent_player_id_));
  // @@protoc_insertion_point(copy_constructor:PBCombat)
}

inline void PBCombat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.starter_user_info_){nullptr}
    , decltype(_impl_.opponent_user_info_){nullptr}
    , decltype(_impl_.starter_user_id_){int64_t{0}}
    , decltype(_impl_.opponent_user_id_){int64_t{0}}
    , decltype(_impl_.wager_){0}
    , decltype(_impl_.turn_){0}
    , decltype(_impl_.starter_action_){0}
    , decltype(_impl_.opponent_action_){0}
    , decltype(_impl_.starter_player_id_){0}
    , decltype(_impl_.opponent_player_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PBCombat::~PBCombat() {
  // @@protoc_insertion_point(destructor:PBCombat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBCombat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.starter_user_info_;
  if (this != internal_default_instance()) delete _impl_.opponent_user_info_;
}

void PBCombat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBCombat::Clear() {
// @@protoc_insertion_point(message_clear_start:PBCombat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.starter_user_info_ != nullptr) {
    delete _impl_.starter_user_info_;
  }
  _impl_.starter_user_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opponent_user_info_ != nullptr) {
    delete _impl_.opponent_user_info_;
  }
  _impl_.opponent_user_info_ = nullptr;
  ::memset(&_impl_.starter_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.opponent_player_id_) -
      reinterpret_cast<char*>(&_impl_.starter_user_id_)) + sizeof(_impl_.opponent_player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBCombat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 starter_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.starter_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 opponent_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.opponent_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 turn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PBCombatActions starter_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_starter_action(static_cast<::PBCombatActions>(val));
        } else
          goto handle_unusual;
        continue;
      // .PBCombatActions opponent_action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_opponent_action(static_cast<::PBCombatActions>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 starter_player_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.starter_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 opponent_player_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.opponent_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PBPlayer starter_user_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_starter_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PBPlayer opponent_user_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_opponent_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBCombat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBCombat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 starter_user_id = 1;
  if (this->_internal_starter_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_starter_user_id(), target);
  }

  // int64 opponent_user_id = 2;
  if (this->_internal_opponent_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_opponent_user_id(), target);
  }

  // int32 wager = 3;
  if (this->_internal_wager() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_wager(), target);
  }

  // int32 turn = 4;
  if (this->_internal_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_turn(), target);
  }

  // .PBCombatActions starter_action = 5;
  if (this->_internal_starter_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_starter_action(), target);
  }

  // .PBCombatActions opponent_action = 6;
  if (this->_internal_opponent_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_opponent_action(), target);
  }

  // int32 starter_player_id = 7;
  if (this->_internal_starter_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_starter_player_id(), target);
  }

  // int32 opponent_player_id = 8;
  if (this->_internal_opponent_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_opponent_player_id(), target);
  }

  // .PBPlayer starter_user_info = 9;
  if (this->_internal_has_starter_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::starter_user_info(this),
        _Internal::starter_user_info(this).GetCachedSize(), target, stream);
  }

  // .PBPlayer opponent_user_info = 10;
  if (this->_internal_has_opponent_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::opponent_user_info(this),
        _Internal::opponent_user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBCombat)
  return target;
}

size_t PBCombat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBCombat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PBPlayer starter_user_info = 9;
  if (this->_internal_has_starter_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.starter_user_info_);
  }

  // .PBPlayer opponent_user_info = 10;
  if (this->_internal_has_opponent_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opponent_user_info_);
  }

  // int64 starter_user_id = 1;
  if (this->_internal_starter_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_starter_user_id());
  }

  // int64 opponent_user_id = 2;
  if (this->_internal_opponent_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_opponent_user_id());
  }

  // int32 wager = 3;
  if (this->_internal_wager() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wager());
  }

  // int32 turn = 4;
  if (this->_internal_turn() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_turn());
  }

  // .PBCombatActions starter_action = 5;
  if (this->_internal_starter_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_starter_action());
  }

  // .PBCombatActions opponent_action = 6;
  if (this->_internal_opponent_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_opponent_action());
  }

  // int32 starter_player_id = 7;
  if (this->_internal_starter_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starter_player_id());
  }

  // int32 opponent_player_id = 8;
  if (this->_internal_opponent_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opponent_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBCombat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBCombat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBCombat::GetClassData() const { return &_class_data_; }


void PBCombat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBCombat*>(&to_msg);
  auto& from = static_cast<const PBCombat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBCombat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_starter_user_info()) {
    _this->_internal_mutable_starter_user_info()->::PBPlayer::MergeFrom(
        from._internal_starter_user_info());
  }
  if (from._internal_has_opponent_user_info()) {
    _this->_internal_mutable_opponent_user_info()->::PBPlayer::MergeFrom(
        from._internal_opponent_user_info());
  }
  if (from._internal_starter_user_id() != 0) {
    _this->_internal_set_starter_user_id(from._internal_starter_user_id());
  }
  if (from._internal_opponent_user_id() != 0) {
    _this->_internal_set_opponent_user_id(from._internal_opponent_user_id());
  }
  if (from._internal_wager() != 0) {
    _this->_internal_set_wager(from._internal_wager());
  }
  if (from._internal_turn() != 0) {
    _this->_internal_set_turn(from._internal_turn());
  }
  if (from._internal_starter_action() != 0) {
    _this->_internal_set_starter_action(from._internal_starter_action());
  }
  if (from._internal_opponent_action() != 0) {
    _this->_internal_set_opponent_action(from._internal_opponent_action());
  }
  if (from._internal_starter_player_id() != 0) {
    _this->_internal_set_starter_player_id(from._internal_starter_player_id());
  }
  if (from._internal_opponent_player_id() != 0) {
    _this->_internal_set_opponent_player_id(from._internal_opponent_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBCombat::CopyFrom(const PBCombat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBCombat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCombat::IsInitialized() const {
  return true;
}

void PBCombat::InternalSwap(PBCombat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBCombat, _impl_.opponent_player_id_)
      + sizeof(PBCombat::_impl_.opponent_player_id_)
      - PROTOBUF_FIELD_OFFSET(PBCombat, _impl_.starter_user_info_)>(
          reinterpret_cast<char*>(&_impl_.starter_user_info_),
          reinterpret_cast<char*>(&other->_impl_.starter_user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBCombat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_combat_2eproto_getter, &descriptor_table_combat_2eproto_once,
      file_level_metadata_combat_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBCombat*
Arena::CreateMaybeMessage< ::PBCombat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBCombat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
